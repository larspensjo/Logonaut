<Window x:Class="Logonaut.UI.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:avalonEdit="http://icsharpcode.net/sharpdevelop/avalonedit"
        xmlns:helpers="clr-namespace:Logonaut.UI.Helpers"
        xmlns:vm="clr-namespace:Logonaut.UI.ViewModels"
        xmlns:converters="clr-namespace:Logonaut.UI.Converters"
        xmlns:local="clr-namespace:Logonaut.UI"
        xmlns:controls="clr-namespace:Logonaut.UI.Controls"
        xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
        xmlns:System="clr-namespace:System;assembly=mscorlib"
        Title="Logonaut" Height="600" Width="900"
        Closing="Window_Closing"
        Style="{DynamicResource {x:Type Window}}">

    <Window.InputBindings>
        <KeyBinding Modifiers="Ctrl" Key="G" Command="{x:Static local:MainWindow.GoToLineBoxFocusCommand}"/>
        <KeyBinding Modifiers="Ctrl" Key="F" Command="{x:Static local:MainWindow.FocusSearchCommand}"/>
        <KeyBinding Key="F3" Command="{Binding NextSearchCommand}" />
        <KeyBinding Key="F3" Modifiers="Shift" Command="{Binding PreviousSearchCommand}" />
        <KeyBinding Modifiers="Ctrl+Alt+Shift" Key="S" Command="{x:Static local:MainWindow.ToggleSimulatorConfigCommand}"/>
    </Window.InputBindings>

    <Window.Resources>
        <!-- TOOD: These converters overlap with some in Converters.xaml -->
        <converters:BoolToVisibilityConverter x:Key="BoolToVis"/>
        <converters:StringToIntConverter x:Key="StringToIntConverter" />

        <Geometry x:Key="AnchorIconGeometry">M 100 12 A 8 8 0 1 1 99.9 12 M 93 28 H 107 V 129 H 92 Z M 50 40 H 150 V 53 H 50 Z M 100 125 C 73 119 57 104 50 87 M 100 125 C 126 121 142 105 150 87 M 44 80 L 57 86 L 48 95 Z M 143 86 L 157 80 L 151 96 Z</Geometry>

        <Style x:Key="AnchorToggleButtonStyle" TargetType="ToggleButton">
            <Setter Property="Width" Value="20"/>
            <Setter Property="Height" Value="20"/>
            <Setter Property="Focusable" Value="False"/>
            <Setter Property="Background" Value="{DynamicResource AnchorButton.Static.Background}"/>
            <Setter Property="BorderBrush" Value="{DynamicResource AnchorButton.Static.Border}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="ToolTip" Value="Auto-scroll disabled. Click to enable."/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ToggleButton">
                        <Border x:Name="BackgroundBorder"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="2"
                                SnapsToDevicePixels="True">
                            <Viewbox Stretch="Uniform"
                                    HorizontalAlignment="Center"
                                    VerticalAlignment="Center"
                                    Margin="2">
                                <!-- *** APPLY RENDER TRANSFORM TO VIEWBOX *** -->
                                <Viewbox.RenderTransform>
                                    <TranslateTransform X="-2" />
                                </Viewbox.RenderTransform>
                                <Path x:Name="anchorPath"
                                    Data="{StaticResource AnchorIconGeometry}"
                                    Fill="{DynamicResource SecondaryTextBrush}"/>
                            </Viewbox>
                        </Border>
                        <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="anchorPath" Property="Fill" Value="{DynamicResource AccentBrush}"/>
                            <Setter TargetName="BackgroundBorder" Property="Background" Value="{DynamicResource AnchorButton.Checked.Background}"/>
                            <Setter Property="ToolTip" Value="Auto-scroll enabled. Click to disable."/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="BackgroundBorder" Property="Background" Value="{DynamicResource AnchorButton.MouseOver.Background}"/>
                            <Setter TargetName="BackgroundBorder" Property="BorderBrush" Value="{DynamicResource AccentBrush}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.5"/>
                        </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style TargetType="{x:Type avalonEdit:TextEditor}" x:Key="TextEditorWithOverviewRulerStyle">
            <!-- Use DynamicResource for theme properties -->
            <Setter Property="Foreground" Value="{DynamicResource EditorForegroundBrush}" />
            <Setter Property="Background" Value="{DynamicResource EditorBackgroundBrush}" />
            <Setter Property="FontFamily" Value="Consolas" />
            <Setter Property="FontSize" Value="12" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type avalonEdit:TextEditor}">
                        <Grid Background="{TemplateBinding Background}">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*" />      <!-- Column 0: ScrollViewer -->
                                <ColumnDefinition Width="Auto" />   <!-- Column 1: Ruler + Button -->
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="*" />      <!-- Row 0: Main Area (Ruler) -->
                                <RowDefinition Height="Auto" />   <!-- Row 1: Button Area -->
                            </Grid.RowDefinitions>

                            <!-- ScrollViewer remains in Column 0, spanning both rows conceptually -->
                            <ScrollViewer x:Name="PART_ScrollViewer"
                                          Grid.Column="0"
                                          Grid.Row="0"
                                          Grid.RowSpan="2"
                                          Focusable="False"
                                          CanContentScroll="True"
                                          VerticalScrollBarVisibility="Hidden"
                                          HorizontalScrollBarVisibility="{TemplateBinding HorizontalScrollBarVisibility}"
                                          Content="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TextArea}">
                            </ScrollViewer>

                            <!-- OverviewRuler goes in Column 1, Row 0 (main area) -->
                            <helpers:OverviewRulerMargin
                                x:Name="OverviewRuler"
                                Grid.Column="1"
                                Grid.Row="0"
                                Width="18"
                                Background="{DynamicResource OverviewRuler.Background}"
                                BorderBrush="{DynamicResource OverviewRuler.BorderBrush}"
                                BorderThickness="1,0,0,0"
                                VerticalOffset="{Binding Path=VerticalOffset, ElementName=PART_ScrollViewer, Mode=OneWay}"
                                ViewportHeight="{Binding Path=ViewportHeight, ElementName=PART_ScrollViewer, Mode=OneWay}"
                                ExtentHeight="{Binding Path=ExtentHeight, ElementName=PART_ScrollViewer, Mode=OneWay}"
                                DocumentLength="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Document.TextLength, Mode=OneWay, FallbackValue=0}"
                                SearchMarkers="{Binding DataContext.SearchMarkers, RelativeSource={RelativeSource AncestorType=Window}, Mode=OneWay}"
                                SearchMarkerBrush="{DynamicResource OverviewRuler.SearchMarkerBrush}"
                                ThumbBrush="{DynamicResource OverviewRuler.ThumbBrush}"
                                />

                            <!-- Anchor ToggleButton goes in Column 1, Row 1 (bottom corner) -->
                            <!-- Binding needs RelativeSource to find Window's DataContext (ViewModel) -->
                            <ToggleButton Style="{StaticResource AnchorToggleButtonStyle}"
                                          Grid.Column="1"
                                          Grid.Row="1"
                                          IsChecked="{Binding DataContext.IsAutoScrollEnabled, RelativeSource={RelativeSource AncestorType=Window}, Mode=TwoWay}"
                                          HorizontalAlignment="Center"
                                          VerticalAlignment="Center"
                                          Margin="0,1,0,1" /> <!-- Adjust margin as needed -->
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </Window.Resources>

    <Window.CommandBindings>
        <CommandBinding Command="{x:Static local:MainWindow.GoToLineBoxFocusCommand}"
                        Executed="GoToLineBoxFocus_Executed"
                        CanExecute="GoToLineBoxFocus_CanExecute"/>
         <CommandBinding Command="{x:Static local:MainWindow.FocusSearchCommand}"
                        Executed="FocusSearch_Executed"
                        CanExecute="FocusSearch_CanExecute"/>
         <CommandBinding Command="{x:Static local:MainWindow.ToggleSimulatorConfigCommand}"
                        Executed="ToggleSimulatorConfig_Executed"
                        CanExecute="ToggleSimulatorConfig_CanExecute"/>
    </Window.CommandBindings>

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>

        <!-- Menu - Use default style which should inherit from theme -->
        <Menu Grid.Row="0">
            <MenuItem Header="_File">
                <MenuItem Header="Open Log File" Command="{Binding OpenLogFileCommand}" />
            </MenuItem>
            <MenuItem Header="_Theme">
                <MenuItem Header="Dark Mode" Command="{Binding Theme.SwitchToDarkCommand}" />
                <MenuItem Header="Light Mode" Command="{Binding Theme.SwitchToLightCommand}" />
            </MenuItem>
            <MenuItem Header="E_xit" Click="ExitMenuItem_Click"/>
        </Menu>

        <!-- Main content -->
        <Grid Grid.Row="1">
            <Grid.ColumnDefinitions>
                <!-- Column 0: Left Panel (Resizable) -->
                <ColumnDefinition Width="1*" MinWidth="200"/> <!-- Use * for resizing, add MinWidth -->

                <!-- Column 1: Grid Splitter -->
                <ColumnDefinition Width="5" />

                <!-- Column 2: Right Panel (Resizable) -->
                <ColumnDefinition Width="3*" MinWidth="300"/> <!-- Use * for resizing, add MinWidth -->
            </Grid.ColumnDefinitions>


            <Grid Grid.Column="0">
                <Border Style="{DynamicResource CardPanelStyle}">
                    <DockPanel>
                        <!-- ... (All existing filter panel content: TextBlock, Profile ComboBox/TextBox, Buttons, TreeView etc.) ... -->
                        <TextBlock DockPanel.Dock="Top" Text="Filters" FontWeight="Bold" Margin="0,0,0,5"/>

                        <!-- Profile Management Area -->
                        <StackPanel DockPanel.Dock="Top" Margin="0,0,0,10">
                            <TextBlock Text="Active Profile:"
                                        Margin="0,0,0,2"
                                        FontSize="10"
                                        Foreground="{DynamicResource SecondaryTextBrush}"/>

                            <Grid Margin="0,0,0,5" MinWidth="180">
                                <!-- TextBox for inline rename. Set DataContext here so code-behind sees the profile VM directly -->
                                <TextBox x:Name="ProfileNameTextBox"
                                        DataContext="{Binding ActiveFilterProfile}"
                                        Visibility="{Binding IsEditing, Converter={StaticResource BoolToVis}}"
                                        Text="{Binding Name, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                        helpers:TextBoxHelper.FocusOnVisible="True"
                                        VerticalAlignment="Center"
                                        MinWidth="150">
                                    <TextBox.InputBindings>
                                        <!-- Commit on Enter -->
                                        <KeyBinding Key="Enter" Command="{Binding EndRenameCommand}"/>
                                        <!-- Cancel on Escape -->
                                        <KeyBinding Key="Escape" Command="{Binding CancelRenameCommand}"/>
                                    </TextBox.InputBindings>
                                    <i:Interaction.Triggers>
                                        <i:EventTrigger EventName="LostFocus">
                                            <!-- Check if still editing before committing -->
                                            <i:InvokeCommandAction Command="{Binding EndRenameCommand}" />
                                        </i:EventTrigger>
                                    </i:Interaction.Triggers>
                                </TextBox>

                                <!-- ComboBox for selection (shows arrow) -->
                                <ComboBox ItemsSource="{Binding AvailableProfiles}"
                                        SelectedItem="{Binding ActiveFilterProfile}"
                                        DisplayMemberPath="Name"
                                        IsEditable="False"
                                        Visibility="{Binding ActiveFilterProfile.IsNotEditing, Converter={StaticResource BoolToVis}, FallbackValue=Visible}"
                                        VerticalAlignment="Center"
                                        Margin="0,0,0,5">
                                    <ComboBox.ToolTip>
                                        <ToolTip>Select the active filter profile.</ToolTip>
                                    </ComboBox.ToolTip>
                                </ComboBox>
                            </Grid>

                            <WrapPanel HorizontalAlignment="Center">
                                <Button Content="New"
                                        Command="{Binding CreateNewProfileCommand}"
                                        Margin="2"
                                        ToolTip="Create a new filter profile"/>
                                <Button Content="Rename"
                                        Command="{Binding ActiveFilterProfile.BeginRenameCommand}"
                                        IsEnabled="{Binding ActiveFilterProfile.IsNotEditing}"
                                        Margin="2"
                                        ToolTip="Rename the selected profile"/>
                                <Button Content="Delete"
                                        Command="{Binding DeleteProfileCommand}"
                                        Margin="2"
                                        ToolTip="Delete the selected profile"/>
                            </WrapPanel>
                        </StackPanel>

                        <!-- Buttons for NODE management (below TreeView) -->
                        <StackPanel DockPanel.Dock="Bottom" Margin="0,10,0,0">
                            <TextBlock Text="Add Filter Node:" Margin="0,0,0,2" FontSize="10" Foreground="{DynamicResource SecondaryTextBrush}" HorizontalAlignment="Center"/>
                            <WrapPanel Orientation="Horizontal" HorizontalAlignment="Center" Margin="0,0,0,10">
                                <!-- Pass string parameter to identify filter type -->
                                <Button Content="Substring" Command="{Binding AddFilterCommand}" CommandParameter="Substring" Margin="2"/>
                                <Button Content="Regex" Command="{Binding AddFilterCommand}" CommandParameter="Regex" Margin="2"/>
                                <Button Content="AND" Command="{Binding AddFilterCommand}" CommandParameter="And" Margin="2"/>
                                <Button Content="OR" Command="{Binding AddFilterCommand}" CommandParameter="Or" Margin="2"/>
                                <Button Content="NOR" Command="{Binding AddFilterCommand}" CommandParameter="Nor" Margin="2"/>
                            </WrapPanel>
                            <!-- Edit/Remove operate on the selected NODE -->
                            <Button Content="Edit Node" Command="{Binding ToggleEditNodeCommand}" Margin="0,5,0,0" ToolTip="Edit the selected filter node's value"/>
                            <Button Content="Remove Node" Command="{Binding RemoveFilterNodeCommand}" Margin="0,5,0,0" ToolTip="Remove the selected filter node and its children"/>
                        </StackPanel>

                        <!-- TreeView now displays the ACTIVE profile's tree -->
                        <TreeView x:Name="FilterTreeViewNameForTesting"
                                ItemsSource="{Binding ActiveTreeRootNodes}"
                                SelectedItemChanged="TreeView_SelectedItemChanged"
                                Margin="0,0,0,0"
                                Background="Transparent">
                                <TreeView.ItemContainerStyle>
                                <!-- Apply the HierarchicalDataTemplate from FilterTemplates.xaml -->
                                <Style TargetType="{x:Type TreeViewItem}" BasedOn="{StaticResource {x:Type TreeViewItem}}">
                                    <!-- Bind IsSelected to the FilterViewModel's IsSelected property if needed -->
                                    <!-- <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}" /> -->
                                </Style>
                            </TreeView.ItemContainerStyle>
                        </TreeView>
                    </DockPanel>
                </Border>

                <!-- Simulator Configuration Overlay Border *** -->
                <!-- Placed *after* the filter border so it renders on top -->
                <Border x:Name="SimulatorConfigOverlay"
                        Background="#D0333333"
                        BorderBrush="{DynamicResource AccentBrush}"
                        BorderThickness="1"
                        CornerRadius="5"
                        Padding="10" Margin="5"
                        Visibility="{Binding IsSimulatorConfigurationVisible, Converter={StaticResource BoolToVis}}">
                    <!-- SIMULATOR CONTROLS HERE *** -->
                    <StackPanel>
                        <TextBlock Text="Log Simulator Controls" FontSize="14" FontWeight="SemiBold" Foreground="White" HorizontalAlignment="Center" Margin="0,0,0,15"/>

                        <!-- Lines Per Second Slider -->
                        <TextBlock Text="Lines Per Second:" Foreground="White" Margin="0,0,0,2"/>
                        <Slider Name="LpsSlider"
                                Minimum="0" Maximum="200" SmallChange="1" LargeChange="10"
                                IsSnapToTickEnabled="True" TickFrequency="1"
                                Value="{Binding SimulatorLPS, Mode=TwoWay}" Margin="0,0,0,10">
                            <Slider.ToolTip>
                                <ToolTip Content="{Binding Path=PlacementTarget.Value,
                                                        RelativeSource={RelativeSource Self},
                                                        StringFormat='{}{0:F0} LPS'}"/>
                                <!-- Alternative using ElementName if you named the Slider -->
                                <!-- <ToolTip Content="{Binding Path=Value, ElementName=LpsSlider, StringFormat='{}{0:F0} LPS'}"/> -->
                            </Slider.ToolTip>
                        </Slider>

                        <TextBlock Text="{Binding SimulatorLPS, StringFormat='{}{0:F0} LPS'}"
                                   Foreground="White"
                                   HorizontalAlignment="Center"
                                   Margin="0,0,0,10"/>

                        <!-- Control Buttons -->
                        <WrapPanel HorizontalAlignment="Center" Margin="0,10,0,10">
                            <Button Content="Start" Width="70" Margin="5"
                                    Command="{Binding StartSimulatorCommand}"
                                    IsEnabled="{Binding IsSimulatorRunning, Converter={StaticResource InverseBoolToVis}}"/>
                             <Button Content="Stop" Width="70" Margin="5"
                                    Command="{Binding StopSimulatorCommand}"
                                    IsEnabled="{Binding IsSimulatorRunning}"/>
                             <Button Content="Restart" Width="70" Margin="5"
                                    Command="{Binding RestartSimulatorCommand}"
                                    IsEnabled="{Binding IsSimulatorRunning}"/>
                        </WrapPanel>

                        <!-- Clear Log Button -->
                        <Button Content="Clear Displayed Log" HorizontalAlignment="Center" Margin="0,15,0,0"
                                Command="{Binding ClearLogCommand}"/>

                    </StackPanel>
                </Border>
            </Grid>


            <GridSplitter Grid.Column="1"
                          Width="5"
                          HorizontalAlignment="Center"
                          VerticalAlignment="Stretch"
                          Background="{DynamicResource BorderBrush}"
                          ShowsPreview="True"
                          ResizeDirection="Columns"
                          ResizeBehavior="PreviousAndNext"/>

            <!-- Right Panel: Log Display and Search -->
            <Grid Grid.Column="2">
                 <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="*"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>

                <!-- Toolbar -->
                <Border Grid.Row="0" Style="{DynamicResource CardPanelStyle}" Padding="5" Margin="5,5,5,0">
                    <WrapPanel Orientation="Horizontal" VerticalAlignment="Center">
                        <CheckBox Content="Line Numbers" IsChecked="{Binding ShowLineNumbers}"
                                      VerticalAlignment="Center"
                                      ToolTip="Show or hide original line numbers" Margin="3"/>
                        <CheckBox Content="Highlight Timestamps" IsChecked="{Binding HighlightTimestamps}"
                                      VerticalAlignment="Center"
                                      ToolTip="Highlight timestamp patterns in log entries" Margin="3"/>

                        <Separator Style="{StaticResource {x:Static ToolBar.SeparatorStyleKey}}" Margin="5,2"/>

                        <StackPanel Orientation="Horizontal" VerticalAlignment="Center">
                            <TextBlock Text="Context Lines:" VerticalAlignment="Center" Margin="5,0,2,0"/>
                            <TextBox Text="{Binding ContextLines, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource StringToIntConverter}}"
                                    Width="35" VerticalAlignment="Center" VerticalContentAlignment="Center" Margin="0,0,2,0">
                                <TextBox.ToolTip><ToolTip>Enter the number of lines to show before and after a matched line (0 = none).</ToolTip></TextBox.ToolTip>
                            </TextBox>
                            <StackPanel Orientation="Vertical" VerticalAlignment="Center">
                                <!-- NEON: Use base Button style, maybe adjust padding/fontsize -->
                                <Button Content="▲" Command="{Binding IncrementContextLinesCommand}" Padding="3,0" Margin="0,0,0,1" FontSize="8" MinHeight="10" ToolTip="Increase Context Lines"/>
                                <Button Content="▼" Command="{Binding DecrementContextLinesCommand}" Padding="3,0" Margin="0,1,0,0" FontSize="8" MinHeight="10" ToolTip="Decrease Context Lines"/>
                            </StackPanel>
                        </StackPanel>

                        <Separator Style="{StaticResource {x:Static ToolBar.SeparatorStyleKey}}" Margin="5,2"/>

                        <!-- Busy Indicator -->
                        <controls:BusyIndicator Width="16" Height="16"
                            VerticalAlignment="Center"
                            Margin="10,0,5,0"
                            ActiveStates="{Binding CurrentBusyStates}"
                            ToolTip="Applying filters or loading data..."/>

                        <TextBlock Text="{Binding SearchStatusText}" VerticalAlignment="Center" Margin="10,0,5,0" FontStyle="Italic" Foreground="{DynamicResource SecondaryTextBrush}"/>
                    </WrapPanel>
                </Border>

                <!-- Log Display Area (Row 1). Use a Grid here to layer the editor and the overlay -->
                <Grid Grid.Row="1">
                    <Border Style="{DynamicResource CardPanelStyle}" Padding="5">
                        <avalonEdit:TextEditor x:Name="LogOutputEditor"
                                            xmlns:avalonEdit="http://icsharpcode.net/sharpdevelop/avalonedit"
                                            xmlns:helpers="clr-namespace:Logonaut.UI.Helpers"
                                            FontFamily="Consolas" FontSize="12pt" IsReadOnly="True"
                                            SyntaxHighlighting="{x:Null}"
                                            WordWrap="False"
                                            VerticalScrollBarVisibility="Disabled"
                                            HorizontalScrollBarVisibility="Auto"
                                            Padding="3,0,0,0"
                                            Style="{StaticResource TextEditorWithOverviewRulerStyle}"
                                            helpers:AvalonEditHelper.FilterSubstrings="{Binding FilterSubstrings, Mode=OneWay}"
                                            helpers:AvalonEditHelper.HighlightTimestamps="{Binding HighlightTimestamps, Mode=OneWay}"
                                            ShowLineNumbers="False"
                                            helpers:AvalonEditHelper.SearchTerm="{Binding SearchText, Mode=OneWay}"
                                            helpers:AvalonEditHelper.SelectOffset="{Binding CurrentMatchOffset, Mode=OneWay}"
                                            helpers:AvalonEditHelper.SelectLength="{Binding CurrentMatchLength, Mode=OneWay}">
                        </avalonEdit:TextEditor>
                    </Border>

                    <Border x:Name="LoadingOverlayContainer" Grid.Row="1"
                            IsHitTestVisible="False"
                            Width="{Binding ElementName=LogOutputEditor, Path=ActualWidth}"
                            Height="{Binding ElementName=LogOutputEditor, Path=ActualHeight}"
                            Visibility="{Binding IsLoading, Converter={StaticResource BoolToVis}}">
                            <!-- Background can be transparent if the overlay control fills it -->
                            <!-- Background="#30000000"-->
                        <controls:LoadingScanlineOverlay/>
                    </Border>
                </Grid>

                <!-- Search Panel -->
                 <Border Grid.Row="2" Style="{DynamicResource CardPanelStyle}" Padding="5" Margin="5,0,5,5">
                     <StackPanel Orientation="Horizontal" HorizontalAlignment="Center" VerticalAlignment="Center">
                        <Button Content="Previous" Command="{Binding PreviousSearchCommand}" Margin="5,0"/>
                        <TextBox
                                x:Name="SearchTextBox"
                                Width="250"
                                Text="{Binding SearchText, UpdateSourceTrigger=PropertyChanged}"
                                Margin="5,0">
                            <TextBox.InputBindings>
                                <KeyBinding Key="Enter"
                                            Command="{Binding DataContext.NextSearchCommand, RelativeSource={RelativeSource AncestorType=Window}}" />
                                            <!-- Binding to the command on the Window's DataContext (MainViewModel) -->
                            </TextBox.InputBindings>
                        </TextBox>

                        <Button Content="Next" Command="{Binding NextSearchCommand}" Margin="5,0" />
                        <Separator Style="{StaticResource {x:Static ToolBar.SeparatorStyleKey}}" Margin="5,0"/>
                        <CheckBox Content="Case Sensitive" IsChecked="{Binding IsCaseSensitiveSearch}" VerticalAlignment="Center" Margin="5,0">
                            <CheckBox.ToolTip><ToolTip>Match case when searching</ToolTip></CheckBox.ToolTip>
                        </CheckBox>
                    </StackPanel>
                 </Border>
            </Grid>
        </Grid>

        <!-- Stats Bar -->
        <Border Grid.Row="2" Style="{DynamicResource CardPanelStyle}">
            <StackPanel Orientation="Horizontal" VerticalAlignment="Center">
                <TextBlock Margin="5,0,15,0" VerticalAlignment="Center" Foreground="{DynamicResource SecondaryTextBrush}">
                    <Run Text="Total Lines:"/>
                    <Run Text="{Binding TotalLogLines, Mode=OneWay}" FontWeight="Bold"/>
                    <Run Text="/ Filtered:"/>
                    <Run Text="{Binding FilteredLogLinesCount, Mode=OneWay}" FontWeight="Bold"/>
                </TextBlock>

                <!-- Separator -->
                <Separator Style="{StaticResource {x:Static ToolBar.SeparatorStyleKey}}" Margin="5,0"/>

                <!-- Jump To Line Section -->
                <TextBlock Text="Selected line: " VerticalAlignment="Center" Margin="5,0,0,0"/>
                <TextBlock MinWidth="40" TextAlignment="Right" VerticalAlignment="Center" ToolTip="Original line number of selected line">
                     <TextBlock.Text>
                        <Binding Path="HighlightedOriginalLineNumber" Mode="OneWay">
                            <Binding.TargetNullValue>
                                <!-- Display '-' if the value is null (though int isn't nullable)
                                     We need a converter to handle -1 -->
                                <System:String>-</System:String>
                            </Binding.TargetNullValue>
                             <!-- Simple Converter Example (Implement this converter) -->
                             <!-- <Binding.Converter>
                                 <localConverters:NegativeToDashConverter/>
                             </Binding.Converter> -->
                             <!-- Or using style/trigger (more complex) -->
                         </Binding>
                     </TextBlock.Text>
                </TextBlock>

                <TextBlock Text="Go To (CTRL+G):" VerticalAlignment="Center" Margin="10,0,3,0"/>
                <TextBox x:Name="JumpToLineTextBox"
                         MinWidth="60" VerticalAlignment="Center" VerticalContentAlignment="Center"
                         Text="{Binding TargetOriginalLineNumberInput, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}">
                    <TextBox.InputBindings>
                        <KeyBinding Key="Enter" Command="{Binding JumpToLineCommand}"/>
                    </TextBox.InputBindings>
                     <i:Interaction.Triggers>
                        <i:EventTrigger EventName="LostFocus">
                             <!-- Optionally trigger jump on lost focus too -->
                             <!-- <i:InvokeCommandAction Command="{Binding JumpToLineCommand}"/> -->
                        </i:EventTrigger>
                    </i:Interaction.Triggers>
                     <TextBox.Style>
                         <Style TargetType="TextBox" BasedOn="{StaticResource {x:Type TextBox}}">
                             <Style.Triggers>
                                 <DataTrigger Binding="{Binding IsJumpTargetInvalid}" Value="True">
                                     <Setter Property="Background" Value="LightCoral"/>
                                     <!-- Optional: Add animation for flashing -->
                                 </DataTrigger>
                             </Style.Triggers>
                         </Style>
                     </TextBox.Style>
                </TextBox>
                <TextBlock Text="{Binding JumpStatusMessage}" Foreground="OrangeRed" VerticalAlignment="Center" Margin="5,0"/>
            </StackPanel>
        </Border>
    </Grid>
</Window>
