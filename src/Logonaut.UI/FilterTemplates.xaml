<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:filters="clr-namespace:Logonaut.Filters;assembly=Logonaut.Filters"
                    xmlns:vm="clr-namespace:Logonaut.UI.ViewModels"
                    xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
                    xmlns:helpers="clr-namespace:Logonaut.UI.Helpers"
                    xmlns:converters="clr-namespace:Logonaut.UI.Converters"
                    xmlns:local="clr-namespace:Logonaut.UI">

    <!-- NEON: Add the Icon Converter -->
    <converters:FilterTypeToIconConverter x:Key="FilterTypeToIconConverter" />
    <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />

    <!-- DataTemplate for FilterViewModel in TreeView -->
    <!-- Explicitly bind to the child collection. This important, or the children will not be displayed -->
    <HierarchicalDataTemplate DataType="{x:Type vm:FilterViewModel}"
                              ItemsSource="{Binding Children}">
        <!-- NEON: Item Border - Subtle background difference based on type -->
        <Border x:Name="ItemBorder" Background="Transparent" Padding="0" CornerRadius="3">
            <StackPanel Orientation="Horizontal">
                <!-- CheckBox for Enabled state -->
                <CheckBox IsChecked="{Binding Enabled}" VerticalAlignment="Center" Margin="0,0,5,0"/>

                <!-- NEON: Icon based on FilterType -->
                <ContentControl Content="{Binding FilterType, Converter={StaticResource FilterTypeToIconConverter}}"
                              VerticalAlignment="Center" Margin="0,0,4,0" Focusable="False"/>

                <!-- Grid for Display/Edit text -->
                <Grid VerticalAlignment="Center">
                    <!-- Display TextBlock -->
                    <TextBlock Text="{Binding DisplayText}"
                               Visibility="{Binding IsNotEditing, Converter={StaticResource BooleanToVisibilityConverter}}"
                               VerticalAlignment="Center">
                         <!-- NEON: Style moved to Theme files, simplify here -->
                         <i:Interaction.Triggers>
                            <i:EventTrigger EventName="MouseLeftButtonUp">
                                <i:InvokeCommandAction Command="{Binding BeginEditCommand}" />
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                    </TextBlock>

                    <!-- Edit TextBox -->
                    <TextBox Text="{Binding FilterText, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                             Visibility="{Binding IsEditing, Converter={StaticResource BooleanToVisibilityConverter}}"
                             helpers:TextBoxHelper.FocusOnVisible="True"
                             VerticalAlignment="Center"
                             MinWidth="80"> <!-- Ensure textbox has some min width -->
                         <!-- NEON: Style moved to Theme files, simplify here -->
                         <i:Interaction.Triggers>
                            <i:EventTrigger EventName="LostFocus">
                                <i:InvokeCommandAction Command="{Binding EndEditCommand}" />
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                        <TextBox.InputBindings>
                            <KeyBinding Key="Enter" Command="{Binding EndEditCommand}" />
                            <KeyBinding Key="Escape" Command="{Binding EndEditCommand}" />
                        </TextBox.InputBindings>
                    </TextBox>
                </Grid>
            </StackPanel>
             <Border.Style>
                <Style TargetType="Border">
                    <Setter Property="Background" Value="Transparent"/>
                     <!-- Optional: Subtle background tint difference -->
                     <!-- <Style.Triggers>
                         <DataTrigger Binding="{Binding FilterType}" Value="SubstringType">
                             <Setter Property="Background" Value="{DynamicResource FilterItemSubstringBackgroundBrush}"/>
                         </DataTrigger>
                          <DataTrigger Binding="{Binding FilterType}" Value="RegexType">
                             <Setter Property="Background" Value="{DynamicResource FilterItemRegexBackgroundBrush}"/>
                         </DataTrigger>
                          <DataTrigger Binding="{Binding FilterType}" Value="AndType">
                             <Setter Property="Background" Value="{DynamicResource FilterItemCompositeBackgroundBrush}"/>
                         </DataTrigger>
                          <DataTrigger Binding="{Binding FilterType}" Value="OrType">
                             <Setter Property="Background" Value="{DynamicResource FilterItemCompositeBackgroundBrush}"/>
                         </DataTrigger>
                         <DataTrigger Binding="{Binding FilterType}" Value="NorType">
                             <Setter Property="Background" Value="{DynamicResource FilterItemCompositeBackgroundBrush}"/>
                         </DataTrigger>
                     </Style.Triggers> -->
                </Style>
            </Border.Style>
        </Border>
    </HierarchicalDataTemplate>

</ResourceDictionary>
