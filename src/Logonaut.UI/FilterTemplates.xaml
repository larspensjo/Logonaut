<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:filters="clr-namespace:Logonaut.Filters;assembly=Logonaut.Filters"
                    xmlns:vm="clr-namespace:Logonaut.UI.ViewModels"
                    xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
                    xmlns:helpers="clr-namespace:Logonaut.UI.Helpers"
                    xmlns:local="clr-namespace:Logonaut.UI">

    <local:BooleanToHighlightConverter x:Key="BooleanToHighlightConverter" />
    <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />

    <!-- This is the DataTemplate being used by your TreeView's ContentPresenter -->
    <DataTemplate DataType="{x:Type vm:FilterViewModel}">
        <Border x:Name="HighlightBorder"
                Background="{Binding IsSelected, Converter={StaticResource BooleanToHighlightConverter}}"
                Padding="3" CornerRadius="3">
            <!-- Use a StackPanel to arrange CheckBox and the rest horizontally -->
            <StackPanel Orientation="Horizontal">
                <!-- Add the CheckBox here, bound to the Enabled property -->
                <CheckBox IsChecked="{Binding Enabled}"
                          VerticalAlignment="Center"
                          Margin="0,0,5,0"/> <!-- Add some right margin -->

                <!-- Keep the existing Grid that handles display/edit switching -->
                <Grid VerticalAlignment="Center">
                    <!-- When not editing, show a TextBlock -->
                    <TextBlock Visibility="{Binding IsNotEditing, Converter={StaticResource BooleanToVisibilityConverter}}">
                        <TextBlock.Style>
                            <Style TargetType="TextBlock">
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding FilterType}" Value="SubstringType">
                                        <Setter Property="Text" Value="{Binding DisplayText}" />
                                        <Setter Property="Foreground" Value="DarkBlue" />
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding FilterType}" Value="RegexType">
                                        <Setter Property="Text" Value="{Binding DisplayText}" />
                                        <Setter Property="Foreground" Value="DarkGreen" />
                                        <Setter Property="FontStyle" Value="Italic" />
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding FilterType}" Value="AndType">
                                        <Setter Property="Text" Value="∧" />
                                        <Setter Property="FontWeight" Value="Bold" />
                                        <Setter Property="Foreground" Value="DarkGreen" />
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding FilterType}" Value="OrType">
                                        <Setter Property="Text" Value="∨" />
                                        <Setter Property="FontWeight" Value="Bold" />
                                        <Setter Property="Foreground" Value="DarkBlue" />
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding FilterType}" Value="NorType">
                                        <Setter Property="Text" Value="¬∨" />
                                        <Setter Property="FontWeight" Value="Bold" />
                                        <Setter Property="Foreground" Value="DarkBlue" />
                                    </DataTrigger>
                                    <!-- Add a trigger for TrueFilter if needed -->
                                    <DataTrigger Binding="{Binding FilterType}" Value="TRUE">
                                        <Setter Property="Text" Value="{Binding DisplayText}" />
                                        <Setter Property="FontWeight" Value="Bold" />
                                        <Setter Property="Foreground" Value="Black" />
                                     </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </TextBlock.Style>
                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="MouseLeftButtonUp">
                                <i:InvokeCommandAction Command="{Binding BeginEditCommand}" />
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                    </TextBlock>

                    <!-- When editing, show a TextBox -->
                    <TextBox Text="{Binding FilterText, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                            Visibility="{Binding IsEditing, Converter={StaticResource BooleanToVisibilityConverter}}"
                            helpers:TextBoxHelper.FocusOnVisible="True">
                        <TextBox.Style>
                            <Style TargetType="TextBox">
                                <Style.Triggers>
                                     <!-- Corrected Binding Path for FilterType -->
                                    <DataTrigger Binding="{Binding FilterType}" Value="SubstringType">
                                        <Setter Property="Background" Value="#E6F7FF" />
                                    </DataTrigger>
                                     <!-- Corrected Binding Path for FilterType -->
                                    <DataTrigger Binding="{Binding FilterType}" Value="RegexType">
                                        <Setter Property="Background" Value="#E6FFE6" />
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </TextBox.Style>
                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="LostFocus">
                                <i:InvokeCommandAction Command="{Binding EndEditCommand}" />
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                        <TextBox.InputBindings>
                            <KeyBinding Key="Enter" Command="{Binding EndEditCommand}" />
                            <!-- Add Escape Key binding for consistency -->
                            <KeyBinding Key="Escape" Command="{Binding EndEditCommand}" />
                        </TextBox.InputBindings>
                    </TextBox>
                </Grid>
            </StackPanel>
        </Border>
    </DataTemplate>

</ResourceDictionary>