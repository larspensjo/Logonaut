<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:converters="clr-namespace:Logonaut.Theming.Converters"
                    xmlns:selectors="clr-namespace:Logonaut.Theming.Selectors">

    <converters:TreeViewIndentConverter x:Key="TreeViewIndentConverter"/>
    <selectors:FilterTypeIconTemplateSelector x:Key="FilterTypeIconTemplateSelectorInstance"/>
    
    <!-- NEON: Define Light Theme Colors -->
    <Color x:Key="NeonAccentColor">#FF00BFFF</Color> <!-- Electric Cyan/Blue -->
    <Color x:Key="BaseBackgroundColor">#FFFFFFFF</Color> <!-- White -->
    <Color x:Key="PanelBackgroundColor">#FFF9F9F9</Color> <!-- Off-White -->
    <Color x:Key="ControlBackgroundColor">#FFFFFFFF</Color> <!-- White Input/Control -->
    <Color x:Key="PrimaryForegroundColor">#FF1C1C1E</Color> <!-- Near Black Text -->
    <Color x:Key="SecondaryForegroundColor">#FF6D6D72</Color> <!-- Medium Grey Text/Icons -->
    <Color x:Key="BorderColor">#FFD1D1D6</Color>      <!-- Light Grey Border -->
    <Color x:Key="ErrorColor">#FFFF3B30</Color>       <!-- Vibrant Red -->
    <Color x:Key="WarningColor">#FFFF9500</Color>     <!-- Vibrant Orange -->
    <Color x:Key="InfoColor">#FF6D6D72</Color>       <!-- Neutral Info Grey -->
    <Color x:Key="HighlightFilterBackgroundColor">#FFFFFFAC</Color> <!-- Pale Yellow -->
    <Color x:Key="HighlightSearchBackgroundColor">#FFAFEEEE</Color> <!-- Pale Turquoise -->
    <Color x:Key="ButtonHoverBackgroundColor">#FFEFEFF4</Color> <!-- Slightly darker hover -->
    <Color x:Key="ButtonPressedBackgroundColor">#FFE0E0E0</Color>
    <Color x:Key="ButtonPressedInnerShadowColor">#FFBEBEBE</Color>
    <Color x:Key="ButtonPressedInnerHighlightColor">#FFFFFFFF</Color>

    <!-- THEME-AWARE FILTER HIGHLIGHT COLORS -->
    <Color x:Key="ThemeAware.FilterHighlight.Red.Background">#33FF8080</Color>     <!-- Lighter, Pale Red -->
    <Color x:Key="ThemeAware.FilterHighlight.Red.Foreground">#FF600000</Color>     <!-- Dark Red Text -->
    <Color x:Key="ThemeAware.FilterHighlight.Green.Background">#3390EE90</Color>   <!-- Lighter, Pale Green -->
    <Color x:Key="ThemeAware.FilterHighlight.Green.Foreground">#FF004000</Color>   <!-- Dark Green Text -->
    <Color x:Key="ThemeAware.FilterHighlight.Blue.Background">#33ADD8E6</Color>    <!-- Lighter, Pale Blue -->
    <Color x:Key="ThemeAware.FilterHighlight.Blue.Foreground">#FF000070</Color>    <!-- Dark Blue Text -->
    <Color x:Key="ThemeAware.FilterHighlight.Yellow.Background">#33FFFFA0</Color>  <!-- Lighter, Pale Yellow -->
    <Color x:Key="ThemeAware.FilterHighlight.Yellow.Foreground">#FF8B4513</Color>  <!-- SaddleBrown/Dark Orange Text -->

    <!-- Brushes for Simulator Overlay -->
    <SolidColorBrush x:Key="Overlay.BackgroundBrush" Color="#E0F9F9F9"/> <!-- Semi-transparent off-white/light grey -->
    <SolidColorBrush x:Key="Overlay.ForegroundBrush" Color="#FF1C1C1E"/> <!-- Near Black Text (matches PrimaryForegroundColor) -->

    <!-- NEON: Define Brushes -->
    <SolidColorBrush x:Key="AccentBrush" Color="{StaticResource NeonAccentColor}"/>
    <SolidColorBrush x:Key="WindowBackgroundBrush" Color="{StaticResource BaseBackgroundColor}"/>
    <SolidColorBrush x:Key="PanelBackgroundBrush" Color="{StaticResource PanelBackgroundColor}"/>
    <SolidColorBrush x:Key="ControlBackgroundBrush" Color="{StaticResource ControlBackgroundColor}"/>
    <SolidColorBrush x:Key="TextForegroundBrush" Color="{StaticResource PrimaryForegroundColor}"/>
    <SolidColorBrush x:Key="SecondaryTextBrush" Color="{StaticResource SecondaryForegroundColor}"/>
    <SolidColorBrush x:Key="BorderBrush" Color="{StaticResource BorderColor}"/>
    <SolidColorBrush x:Key="ErrorBrush" Color="{StaticResource ErrorColor}"/>
    <SolidColorBrush x:Key="WarningBrush" Color="{StaticResource WarningColor}"/>
    <SolidColorBrush x:Key="InfoBrush" Color="{StaticResource InfoColor}"/>
    <SolidColorBrush x:Key="HighlightFilterBackgroundBrush" Color="{StaticResource HighlightFilterBackgroundColor}"/>
    <SolidColorBrush x:Key="HighlightSearchBackgroundBrush" Color="{StaticResource HighlightSearchBackgroundColor}"/>
    <SolidColorBrush x:Key="DividerBrush" Color="{StaticResource BorderColor}" /> <!-- For VerticalLineMargin/Separators -->
    <SolidColorBrush x:Key="ButtonHoverBackgroundBrush" Color="{StaticResource ButtonHoverBackgroundColor}" />
    <SolidColorBrush x:Key="ButtonPressedBackgroundBrush" Color="{StaticResource ButtonPressedBackgroundColor}" />
    <SolidColorBrush x:Key="ChunkSeparatorBrush" Color="#A0B0D0"/>

    <!-- BRUSHES FOR FILTER HIGHLIGHTS -->
    <SolidColorBrush x:Key="FilterHighlight.Default.Background" Color="{StaticResource HighlightFilterBackgroundColor}"/> <!-- Default uses existing -->
    <SolidColorBrush x:Key="FilterHighlight.Default.Foreground" Color="{StaticResource PrimaryForegroundColor}"/>       <!-- Default uses existing -->
    <SolidColorBrush x:Key="FilterHighlight.Red.Background" Color="{StaticResource ThemeAware.FilterHighlight.Red.Background}"/>
    <SolidColorBrush x:Key="FilterHighlight.Red.Foreground" Color="{StaticResource ThemeAware.FilterHighlight.Red.Foreground}"/>
    <SolidColorBrush x:Key="FilterHighlight.Green.Background" Color="{StaticResource ThemeAware.FilterHighlight.Green.Background}"/>
    <SolidColorBrush x:Key="FilterHighlight.Green.Foreground" Color="{StaticResource ThemeAware.FilterHighlight.Green.Foreground}"/>
    <SolidColorBrush x:Key="FilterHighlight.Blue.Background" Color="{StaticResource ThemeAware.FilterHighlight.Blue.Background}"/>
    <SolidColorBrush x:Key="FilterHighlight.Blue.Foreground" Color="{StaticResource ThemeAware.FilterHighlight.Blue.Foreground}"/>
    <SolidColorBrush x:Key="FilterHighlight.Yellow.Background" Color="{StaticResource ThemeAware.FilterHighlight.Yellow.Background}"/>
    <SolidColorBrush x:Key="FilterHighlight.Yellow.Foreground" Color="{StaticResource ThemeAware.FilterHighlight.Yellow.Foreground}"/>

    <!-- Brushes for EmptyDropTargetAdorner -->
    <SolidColorBrush x:Key="EmptyDropAdorner.BackgroundBrush" Color="#33E0E0E0"/> <!-- Semi-transparent Light Grey (Light Theme) -->
    <SolidColorBrush x:Key="EmptyDropAdorner.BorderBrush" Color="{StaticResource NeonAccentColor}"/>
    <SolidColorBrush x:Key="EmptyDropAdorner.TextBrush" Color="{StaticResource SecondaryForegroundColor}"/>
    <SolidColorBrush x:Key="EmptyDropAdorner.Resting.BackgroundBrush" Color="#1AE0E0E0"/> <!-- Even more transparent Light Grey -->
    <SolidColorBrush x:Key="EmptyDropAdorner.Resting.BorderBrush" Color="{StaticResource BorderColor}"/> <!-- Less prominent border -->
    <SolidColorBrush x:Key="EmptyDropAdorner.Resting.TextBrush" Color="#AA6D6D72"/> <!-- Dimmer SecondaryTextBrush (e.g., 66% alpha) -->

    <SolidColorBrush x:Key="AnchorButton.Static.Background" Color="#FFEFEFF4"/> <!-- Slightly darker than PanelBackground -->
    <SolidColorBrush x:Key="AnchorButton.Static.Border" Color="#FFC7C7CC"/>    <!-- Subtle border -->
    <SolidColorBrush x:Key="AnchorButton.Checked.Background" Color="#4C00BFFF"/> <!-- Semi-transparent Accent -->
    <SolidColorBrush x:Key="AnchorButton.MouseOver.Background" Color="#FFDADAE0"/>

    <!-- CheckBox Specific Brushes -->
    <SolidColorBrush x:Key="CheckBox.Static.Background" Color="Transparent"/>
    <!-- Standard border for light theme -->
    <SolidColorBrush x:Key="CheckBox.Static.BorderBrush" Color="#707070"/> <!-- Standard gray -->
    <SolidColorBrush x:Key="CheckBox.MouseOver.Background" Color="#E0E0E0"/> <!-- Subtle hover background -->
    <SolidColorBrush x:Key="CheckBox.Pressed.Background" Color="#CCCCCC"/>
    <SolidColorBrush x:Key="CheckBox.Disabled.Foreground" Color="#AAAAAA"/>
    <SolidColorBrush x:Key="CheckBox.Disabled.Background" Color="#F4F4F4"/>
    <SolidColorBrush x:Key="CheckBox.Disabled.BorderBrush" Color="#DDDDDD"/>

    <!-- Persistent line highlihting -->
    <SolidColorBrush x:Key="PersistedHighlightBrush" Color="#E0E0E0" /> <!-- Light Gray -->

    <!-- ComboBox misc. brushes -->
    <SolidColorBrush x:Key="ComboBoxArrowBrush" Color="{StaticResource SecondaryForegroundColor}"/>
    <SolidColorBrush x:Key="ComboBoxBackgroundBrush" Color="{StaticResource ControlBackgroundColor}"/>
    <SolidColorBrush x:Key="ComboBoxBorderBrush" Color="{StaticResource BorderColor}"/>
    <SolidColorBrush x:Key="ComboBoxDropdownBackgroundBrush" Color="{StaticResource PanelBackgroundColor}"/>
    <SolidColorBrush x:Key="ComboBoxDropdownBorderBrush" Color="{StaticResource BorderColor}"/>

    <!-- Hover state for items in the popup list -->
    <SolidColorBrush x:Key="ComboBoxItemHoverBackgroundBrush" Color="{StaticResource PanelBackgroundColor}"/>
    <SolidColorBrush x:Key="ComboBoxItemHoverForegroundBrush" Color="{StaticResource PrimaryForegroundColor}"/>

    <!-- CLINICAL NEON Spinner -->
    <SolidColorBrush x:Key="SpinnerPrimaryBrush" Color="{StaticResource NeonAccentColor}"/>

    <!-- NEON: Subtle Shadow Effect -->
    <DropShadowEffect x:Key="FocusGlowEffect" Color="{StaticResource GlowColor}" ShadowDepth="0" BlurRadius="8" Opacity="0.9"/>
    <DropShadowEffect x:Key="PanelShadowEffect" Color="#FF000000" ShadowDepth="3" BlurRadius="8" Opacity="0.4"/>
    <DropShadowEffect x:Key="InnerShadowEffect" Color="#AA000000" ShadowDepth="1" BlurRadius="2" Opacity="0.5"/>


    <DataTemplate x:Key="SubstringTypeIconTemplate">
        <Path Fill="{DynamicResource TextForegroundBrush}" 
                Data="M 5,5 L 15,5 M 5,10 L 15,10 M 5,15 L 15,15" 
                Stretch="Uniform" Width="12" Height="12" />
    </DataTemplate>
    <DataTemplate x:Key="RegexTypeIconTemplate">
        <Path Fill="{DynamicResource TextForegroundBrush}" 
                Data="M 3,3 C 8,15 12,5 17,17" 
                Stretch="Uniform" Width="12" Height="12" />
    </DataTemplate>
    <DataTemplate x:Key="AndTypeIconTemplate">
        <Path Fill="{DynamicResource TextForegroundBrush}" 
                Data="M 5,15 L 10,5 L 15,15 M 7.5,11 H 12.5" 
                Stretch="Uniform" Width="12" Height="12" />
    </DataTemplate>
    <DataTemplate x:Key="OrTypeIconTemplate">
        <Path Fill="{DynamicResource TextForegroundBrush}" 
                Data="M 5,5 L 10,15 L 15,5" 
                Stretch="Uniform" Width="12" Height="12" />
    </DataTemplate>
    <DataTemplate x:Key="NorTypeIconTemplate">
        <Path Fill="{DynamicResource TextForegroundBrush}" 
                Data="M 5,5 L 10,15 L 15,5 M 3,2 H 17" 
                Stretch="Uniform" Width="12" Height="12" />
    </DataTemplate>
    <DataTemplate x:Key="TRUETIconTemplate">
        <Path Fill="{DynamicResource TextForegroundBrush}" 
                Data="M 5,10 L 9,15 L 15,5" 
                Stretch="Uniform" Width="12" Height="12" />
    </DataTemplate>

    <Style x:Key="FilterPaletteItemStyle" TargetType="ContentPresenter">
        <Setter Property="Margin" Value="2"/>
    </Style>

    <DataTemplate x:Key="FilterPaletteItemTemplate">
        <Border x:Name="PaletteItemBorder"
                IsEnabled="{Binding IsEnabled}"
                Background="{DynamicResource ControlBackgroundBrush}"
                BorderBrush="{DynamicResource BorderBrush}"
                BorderThickness="1" CornerRadius="5" Padding="8,5" MinWidth="90"
                Cursor="Hand" SnapsToDevicePixels="True">
            <Border.Style>
                <Style TargetType="Border">
                    <Style.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" Value="{DynamicResource AccentBrush}"/>
                            <Setter Property="Background" Value="{DynamicResource ButtonHoverBackgroundBrush}"/>
                            <Setter Property="Effect">
                                <Setter.Value>
                                    <DropShadowEffect ShadowDepth="1" BlurRadius="3" Opacity="0.15" Color="{StaticResource PrimaryForegroundColor}"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.5"/> 
                        </Trigger>
                    </Style.Triggers>
                </Style>
            </Border.Style>
            <StackPanel Orientation="Horizontal">
                <ContentPresenter Content="{Binding TypeIdentifier}"
                                  ContentTemplateSelector="{StaticResource FilterTypeIconTemplateSelectorInstance}"
                                  VerticalAlignment="Center" Margin="0,0,5,0" Focusable="False"/>
                <TextBlock Text="{Binding DisplayName}" VerticalAlignment="Center"
                           Foreground="{DynamicResource TextForegroundBrush}"/>
            </StackPanel>
        </Border>
    </DataTemplate>

    <Style x:Key="PaletteGroupBoxStyle" TargetType="GroupBox">
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}"/>
        <!-- Making the border slightly thicker for better visibility in Light Theme -->
        <Setter Property="BorderThickness" Value="1.25"/> 
        <Setter Property="Padding" Value="5"/>
        <Setter Property="Foreground" Value="{DynamicResource SecondaryTextBrush}"/>
        <!-- Give the GroupBox a slightly different background than the main panel for definition -->
        <Setter Property="Background" Value="{DynamicResource ControlBackgroundBrush}"/> 
        <Setter Property="Margin" Value="0,5,0,5"/>
        <!-- Optional: If you want a custom template for the header appearance (e.g., different background) -->
        <!-- You could add a Setter for Property="Template" here, similar to what was shown for light theme if desired -->
    </Style>

    <Style x:Key="PowerToggleButtonStyle" TargetType="ToggleButton">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Width" Value="22"/>
        <Setter Property="Height" Value="22"/>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Border Background="{TemplateBinding Background}" BorderBrush="Transparent" CornerRadius="3">
                        <Path x:Name="PowerIcon" 
                              Data="M 8 3 A 5 5 0 1 1 7.9 3.05 M 10.189 5.016 V 10"
                              Stroke="{DynamicResource SecondaryTextBrush}"
                              StrokeThickness="1.5"
                              Stretch="Uniform"
                              Width="14" Height="14"
                              VerticalAlignment="Center" HorizontalAlignment="Center"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <!-- Hover when OFF -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="IsChecked" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PowerIcon" Property="Stroke" Value="{DynamicResource TextForegroundBrush}"/>
                        </MultiTrigger>
                        <!-- Checked (ON) state -->
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="PowerIcon" Property="Stroke" Value="{DynamicResource AccentBrush}"/>
                        </Trigger>
                        <!-- Disabled state -->
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.5"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="OverlayCloseButtonStyle" TargetType="Button">
        <!-- Basic properties remain mostly the same -->
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{DynamicResource SecondaryTextBrush}"/>
        <Setter Property="BorderThickness" Value="1"/> <!-- Use border for hover effect -->
        <Setter Property="BorderBrush" Value="Transparent"/> <!-- Keep border transparent initially -->
        <Setter Property="Padding" Value="0"/>
        <Setter Property="Width" Value="20"/>
        <Setter Property="Height" Value="20"/>
        <Setter Property="HorizontalAlignment" Value="Right"/>
        <Setter Property="VerticalAlignment" Value="Top"/>
        <Setter Property="Margin" Value="0,0,0,0"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="ToolTip" Value="Close Simulator Controls"/>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <!-- Use a Border as the main container -->
                    <Border x:Name="ButtonBorder"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="10"
                            SnapsToDevicePixels="True">
                        <TextBlock Text="✕"
                                   HorizontalAlignment="Center"
                                   VerticalAlignment="Center"
                                   Foreground="{TemplateBinding Foreground}"
                                   FontSize="{TemplateBinding FontSize}"
                                   FontWeight="{TemplateBinding FontWeight}"
                                   Margin="0,0,0,1"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <!-- Change BorderBrush to AccentColor on hover -->
                            <Setter TargetName="ButtonBorder" Property="BorderBrush" Value="{DynamicResource AccentBrush}"/>
                             <!-- Make 'X' use AccentColor too -->
                             <Setter Property="Foreground" Value="{DynamicResource AccentBrush}"/>
                             <!-- Optional: Slight background change on hover -->
                             <Setter TargetName="ButtonBorder" Property="Background" Value="{DynamicResource ButtonHoverBackgroundBrush}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <!-- Use AccentBrush for background when pressed -->
                            <Setter TargetName="ButtonBorder" Property="Background" Value="{DynamicResource AccentBrush}"/>
                            <!-- Change 'X' color for contrast -->
                            <Setter Property="Foreground" Value="{DynamicResource WindowBackgroundBrush}"/>
                            <Setter TargetName="ButtonBorder" Property="BorderBrush" Value="{DynamicResource AccentBrush}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.5"/>
                            <Setter TargetName="ButtonBorder" Property="BorderBrush" Value="{DynamicResource BorderBrush}"/> <!-- Show standard border when disabled -->
                        </Trigger>
                        <!-- Ensure border is transparent when not hovered/pressed -->
                         <MultiTrigger>
                             <MultiTrigger.Conditions>
                                 <Condition Property="IsMouseOver" Value="False"/>
                                 <Condition Property="IsPressed" Value="False"/>
                                 <Condition Property="IsEnabled" Value="True"/>
                             </MultiTrigger.Conditions>
                             <Setter TargetName="ButtonBorder" Property="BorderBrush" Value="Transparent"/>
                             <Setter TargetName="ButtonBorder" Property="Background" Value="Transparent"/>
                         </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Light Theme ToolTip Style -->
    <Style TargetType="ToolTip">
        <!-- Setters for properties directly on ToolTip or used by TemplateBinding -->
        <Setter Property="Background" Value="{DynamicResource PanelBackgroundBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource TextForegroundBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Padding" Value="5,3"/>
        <!-- Define the custom template -->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToolTip">
                    <!-- The Border IS the visual root now -->
                    <Border Name="RootBorder"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="3"
                            Padding="{TemplateBinding Padding}"
                            SnapsToDevicePixels="True">
                        <!-- ContentPresenter displays the ToolTip's content -->
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                        VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                        SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                    </Border>
                    <!-- Optional: Add triggers if needed for states like IsOpen -->
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Effect" Value="{StaticResource PanelShadowEffect}"/>
    </Style>

    <!-- NEON: Global Styles -->
    <Style TargetType="Window">
        <Setter Property="Background" Value="{DynamicResource WindowBackgroundBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource TextForegroundBrush}"/>
    </Style>

    <Style TargetType="TextBlock">
        <Setter Property="Foreground" Value="{DynamicResource TextForegroundBrush}"/>
    </Style>

    <Style TargetType="Border" x:Key="CardPanelStyle">
        <Setter Property="CornerRadius" Value="8" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="Background" Value="{DynamicResource PanelBackgroundBrush}" />
        <Setter Property="Padding" Value="10" />
        <Setter Property="Margin" Value="5" />
        <Setter Property="Effect" Value="{StaticResource PanelShadowEffect}"/>
    </Style>

    <!-- NEON: Button Style -->
    <Style TargetType="Button">
        <Setter Property="Background" Value="{DynamicResource ControlBackgroundBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextForegroundBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Padding" Value="10,5" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border x:Name="ButtonBorder"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="4">
                        <Grid>
                            <!-- Inner highlight/shadow for pressed state -->
                            <Border x:Name="InnerHighlight" BorderThickness="1" CornerRadius="4" Visibility="Collapsed">
                                <Border.BorderBrush>
                                     <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                        <GradientStop Color="{StaticResource ButtonPressedInnerHighlightColor}" Offset="0.0"/>
                                        <GradientStop Color="Transparent" Offset="1.0"/>
                                    </LinearGradientBrush>
                                </Border.BorderBrush>
                            </Border>
                             <Border x:Name="InnerShadow" BorderThickness="1" CornerRadius="4" Visibility="Collapsed">
                                <Border.BorderBrush>
                                     <LinearGradientBrush StartPoint="0,1" EndPoint="0,0">
                                        <GradientStop Color="{StaticResource ButtonPressedInnerShadowColor}" Offset="0.0"/>
                                        <GradientStop Color="Transparent" Offset="1.0"/>
                                    </LinearGradientBrush>
                                </Border.BorderBrush>
                            </Border>
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" RecognizesAccessKey="True" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="ButtonBorder" Property="Background" Value="{DynamicResource ButtonHoverBackgroundBrush}" />
                            <Setter TargetName="ButtonBorder" Property="BorderBrush" Value="{DynamicResource AccentBrush}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="ButtonBorder" Property="Background" Value="{DynamicResource ButtonPressedBackgroundBrush}" />
                            <Setter TargetName="InnerHighlight" Property="Visibility" Value="Visible" />
                            <Setter TargetName="InnerShadow" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.5" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- NEON: TextBox Style -->
    <Style TargetType="TextBox">
        <Setter Property="Background" Value="{DynamicResource ControlBackgroundBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource TextForegroundBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Padding" Value="3"/>
        <Setter Property="CaretBrush" Value="{DynamicResource TextForegroundBrush}"/>
        <Setter Property="SelectionBrush" Value="{DynamicResource AccentBrush}"/>
         <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TextBox">
                    <Border x:Name="Bd"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="3">
                        <ScrollViewer x:Name="PART_ContentHost" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter TargetName="Bd" Property="BorderBrush" Value="{DynamicResource AccentBrush}"/>
                            <Setter TargetName="Bd" Property="BorderThickness" Value="2"/> <!-- Make border thicker on focus -->
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- NEON: CheckBox Style -->
    <Style TargetType="CheckBox">
        <!-- Keep existing setters like Foreground, Padding, VerticalContentAlignment -->
        <Setter Property="Foreground" Value="{DynamicResource TextForegroundBrush}"/>
        <!-- Removed default BorderBrush/Background setters here, rely on template -->
        <Setter Property="Padding" Value="4,0,0,0"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="CheckBox">
                    <BulletDecorator Background="Transparent" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                        <BulletDecorator.Bullet>
                            <Border x:Name="OuterBorder"
                                    Width="13" Height="13"
                                    BorderBrush="{DynamicResource CheckBox.Static.BorderBrush}"
                                    Background="{DynamicResource CheckBox.Static.Background}"
                                    BorderThickness="1"
                                    CornerRadius="2">
                                <Path x:Name="CheckMark"
                                    Width="7" Height="7"
                                    SnapsToDevicePixels="False"
                                    Stroke="{DynamicResource AccentBrush}"
                                    StrokeThickness="2"
                                    Data="M 0 0 L 7 7 M 0 7 L 7 0"
                                    Visibility="Collapsed"/>
                            </Border>
                        </BulletDecorator.Bullet>
                        <ContentPresenter Margin="{TemplateBinding Padding}"
                                        VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                        HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                        RecognizesAccessKey="True"/>
                    </BulletDecorator>
                    <ControlTemplate.Triggers>
                        <!-- Trigger for Checked state -->
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="CheckMark" Property="Visibility" Value="Visible"/>
                            <!-- Optional: Change background/border when checked if desired -->
                            <!-- <Setter TargetName="OuterBorder" Property="Background" Value="{DynamicResource CheckBox.Checked.Background}"/> -->
                            <!-- <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource CheckBox.Checked.BorderBrush}"/> -->
                        </Trigger>
                        <!-- Null state (Indeterminate) - Optional -->
                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <!-- Style for indeterminate state if needed -->
                            <!-- <Setter TargetName="CheckMark" Property="Data" Value="M 0 3.5 L 7 3.5" /> -->
                            <!-- <Setter TargetName="CheckMark" Property="Visibility" Value="Visible"/> -->
                        </Trigger>
                        <!-- Trigger for MouseOver -->
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="OuterBorder" Property="Background" Value="{DynamicResource CheckBox.MouseOver.Background}"/>
                            <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource AccentBrush}"/>
                            <Setter TargetName="OuterBorder" Property="Effect" Value="{StaticResource FocusGlowEffect}"/>
                        </Trigger>
                        <!-- Trigger for Pressed -->
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="OuterBorder" Property="Background" Value="{DynamicResource CheckBox.Pressed.Background}"/>
                            <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource AccentBrush}"/>
                        </Trigger>
                        <!-- Trigger for Focused -->
                        <Trigger Property="IsFocused" Value="True">
                            <!-- Use AccentBrush for focus indication -->
                            <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource AccentBrush}"/>
                            <Setter TargetName="OuterBorder" Property="Effect" Value="{StaticResource FocusGlowEffect}"/>
                        </Trigger>
                        <!-- Trigger for Disabled -->
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource CheckBox.Disabled.Foreground}"/>
                            <Setter TargetName="OuterBorder" Property="Background" Value="{DynamicResource CheckBox.Disabled.Background}"/>
                            <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource CheckBox.Disabled.BorderBrush}"/>
                            <!-- Checkmark uses foreground, so it gets dimmed too -->
                            <!-- <Setter TargetName="CheckMark" Property="Stroke" Value="{DynamicResource CheckBox.Disabled.Foreground}"/> -->
                            <Setter Property="Opacity" Value="0.7" /> <!-- Adjust opacity if needed -->
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- NEON: ToggleSwitch Style -->
     <Style x:Key="ToggleSwitchStyle" TargetType="ToggleButton">
        <Setter Property="Foreground" Value="{DynamicResource TextForegroundBrush}" />
        <Setter Property="Background" Value="{DynamicResource BorderBrush}" /> <!-- Off state background -->
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="Width" Value="44"/>
        <Setter Property="Height" Value="20"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Grid>
                        <Border x:Name="BackgroundBorder" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1" CornerRadius="10"/>
                        <Ellipse x:Name="Thumb" Fill="{DynamicResource WindowBackgroundBrush}" HorizontalAlignment="Left" Width="16" Height="16" Margin="2"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="BackgroundBorder" Property="Background" Value="{DynamicResource AccentBrush}" />
                            <Setter TargetName="BackgroundBorder" Property="BorderBrush" Value="{DynamicResource AccentBrush}" />
                            <Setter TargetName="Thumb" Property="HorizontalAlignment" Value="Right"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                             <Setter TargetName="BackgroundBorder" Property="BorderBrush" Value="{DynamicResource AccentBrush}" />
                        </Trigger>
                         <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.5" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ExpandCollapseToggleStyle" TargetType="ToggleButton">
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Width" Value="19"/>
        <Setter Property="Height" Value="13"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Border Width="19" Height="13" Background="Transparent">
                        <Path x:Name="ExpandPath"
                              HorizontalAlignment="Center" VerticalAlignment="Center"
                              Data="M 4 0 L 8 4 L 4 8 Z"> <!-- Default: Arrow pointing right -->
                            <Path.Fill>
                                <!-- Use SecondaryTextBrush for arrow color -->
                                <DynamicResource ResourceKey="SecondaryTextBrush"/>
                            </Path.Fill>
                        </Path>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <!-- Change arrow data to point down when expanded -->
                            <Setter TargetName="ExpandPath" Property="Data" Value="M 0 4 L 4 8 L 8 4 Z"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                             <Setter TargetName="ExpandPath" Property="Fill">
                                <Setter.Value>
                                    <!-- Use AccentBrush on hover -->
                                    <DynamicResource ResourceKey="AccentBrush"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.5"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- NEON: Menu Styles -->
    <Style TargetType="Menu">
        <Setter Property="Background" Value="{DynamicResource PanelBackgroundBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextForegroundBrush}" />
    </Style>

    <Style TargetType="MenuItem">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource TextForegroundBrush}" />
        <Setter Property="Padding" Value="6,4"/>
        <Style.Triggers>
            <Trigger Property="IsHighlighted" Value="True">
                <Setter Property="Background" Value="{DynamicResource AccentBrush}"/>
                <Setter Property="Foreground" Value="{DynamicResource WindowBackgroundBrush}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.5" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- CLINICAL NEON: TabControl and TabItem Styles -->
    <Style x:Key="ThemeAwareTabItemStyle" TargetType="TabItem">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Foreground" Value="{DynamicResource SecondaryTextBrush}"/>
        <Setter Property="Background" Value="{DynamicResource PanelBackgroundBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Margin" Value="-2,-2,-2,0"/>
        <Setter Property="Padding" Value="6,2,6,2"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TabItem">
                    <Grid x:Name="templateRoot" SnapsToDevicePixels="true" ToolTip="Double-click to rename">
                        <Grid.Style>
                            <Style TargetType="Grid">
                                <Style.Triggers>
                                    <!-- Hide the tooltip when renaming is active -->
                                    <DataTrigger Binding="{Binding IsEditingHeader}" Value="True">
                                        <Setter Property="ToolTip" Value="{x:Null}"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Grid.Style>

                        <Border x:Name="mainBorder"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Margin="0"
                                CornerRadius="4,4,0,0"/>
                        <StackPanel Orientation="Horizontal" Margin="{TemplateBinding Padding}">
                            <ContentPresenter x:Name="contentPresenter"
                                              ContentSource="Header"
                                              Focusable="False"
                                              HorizontalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"
                                              VerticalAlignment="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                              Margin="0,0,5,0" />
                            <!-- Close Button -->
                            <Button x:Name="CloseButton" Command="{Binding CloseTabCommand}" ToolTip="Close Tab">
                                <Button.Style>
                                    <Style TargetType="Button">
                                        <Setter Property="Background" Value="Transparent"/>
                                        <Setter Property="BorderThickness" Value="0"/>
                                        <Setter Property="Width" Value="16"/>
                                        <Setter Property="Height" Value="16"/>
                                        <Setter Property="VerticalAlignment" Value="Center"/>
                                        <Setter Property="Focusable" Value="False"/>
                                        <Setter Property="Template">
                                            <Setter.Value>
                                                <ControlTemplate TargetType="Button">
                                                    <Border Background="Transparent" CornerRadius="8">
                                                        <TextBlock Text="✕"
                                                                   HorizontalAlignment="Center"
                                                                   VerticalAlignment="Center"
                                                                   Margin="0,-1,0,0"
                                                                   Foreground="{DynamicResource SecondaryTextBrush}"/>
                                                    </Border>
                                                </ControlTemplate>
                                            </Setter.Value>
                                        </Setter>
                                        <Style.Triggers>
                                            <Trigger Property="IsMouseOver" Value="True">
                                                <Setter Property="Background" Value="{DynamicResource ButtonHoverBackgroundBrush}"/>
                                                <Setter Property="Foreground" Value="{DynamicResource AccentBrush}"/>
                                            </Trigger>
                                            <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=TabItem}, Path=IsSelected}" Value="True">
                                                <Setter Property="Foreground" Value="{DynamicResource SecondaryTextBrush}"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </Button.Style>
                            </Button>
                        </StackPanel>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <!-- Hover on Inactive Tab -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="False"/>
                                <Condition Property="IsMouseOver" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" Value="{DynamicResource ButtonHoverBackgroundBrush}"/>
                            <Setter Property="Foreground" Value="{DynamicResource TextForegroundBrush}"/>
                            <Setter TargetName="mainBorder" Property="BorderBrush" Value="{DynamicResource BorderBrush}"/>
                        </MultiTrigger>
                        <!-- Selected Tab -->
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Panel.ZIndex" Value="1"/>
                            <Setter Property="Foreground" Value="{DynamicResource TextForegroundBrush}"/>
                            <Setter TargetName="mainBorder" Property="Background" Value="{DynamicResource WindowBackgroundBrush}"/>
                            <Setter TargetName="mainBorder" Property="BorderBrush" Value="{DynamicResource BorderBrush}"/>
                            <Setter TargetName="mainBorder" Property="BorderThickness" Value="1,1,1,0"/>
                        </Trigger>
                        <!-- Disabled Tab -->
                         <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.5" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ThemeAwareTabControlStyle" TargetType="TabControl">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="ItemContainerStyle" Value="{StaticResource ThemeAwareTabItemStyle}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TabControl">
                    <Grid KeyboardNavigation.TabNavigation="Local">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>
                        <TabPanel x:Name="HeaderPanel"
                                  Grid.Row="0"
                                  Panel.ZIndex="1"
                                  Margin="2,2,2,0"
                                  IsItemsHost="true"
                                  KeyboardNavigation.TabIndex="1"
                                  Background="Transparent" />
                        <Border x:Name="ContentPanel"
                                Grid.Row="1"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                KeyboardNavigation.DirectionalNavigation="Contained"
                                KeyboardNavigation.TabIndex="2"
                                KeyboardNavigation.TabNavigation="Local">
                            <ContentPresenter x:Name="PART_SelectedContentHost"
                                              ContentSource="SelectedContent"
                                              Margin="{TemplateBinding Padding}"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- NEON: TreeView Styles -->
    <Style TargetType="TreeView">
        <Setter Property="Background" Value="{DynamicResource PanelBackgroundBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource TextForegroundBrush}"/>
        <Setter Property="BorderThickness" Value="0"/>
    </Style>

    <Style TargetType="TreeViewItem">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Padding" Value="1"/> <!-- Adjust padding as needed, maybe less than 3 -->
        <!-- Bind IsExpanded to the ViewModel -->
        <Setter Property="IsExpanded" Value="{Binding IsExpanded, Mode=TwoWay}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TreeViewItem">
                    <!-- Use Grid as root -->
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/> <!-- Row for the header -->
                            <RowDefinition Height="*"/>    <!-- Row for the items (children), takes remaining space -->
                        </Grid.RowDefinitions>

                        <!-- Header Border (stays in Row 0) -->
                        <Border Name="Bd"
                                Grid.Row="0"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Padding="{TemplateBinding Padding}">
                            <!-- The inner Grid for Expander/Header Content -->
                            <Grid Margin="{Binding RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource TreeViewIndentConverter}}">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="19" /> <!-- Expander -->
                                    <ColumnDefinition Width="Auto" /> <!-- Icon/Content Presenter -->
                                    <ColumnDefinition Width="*" /> <!-- Takes rest of header width -->
                                </Grid.ColumnDefinitions>
                                <ToggleButton x:Name="Expander" Style="{StaticResource ExpandCollapseToggleStyle}" IsChecked="{Binding Path=IsExpanded, RelativeSource={RelativeSource TemplatedParent}}" ClickMode="Press"/>
                                <ContentPresenter x:Name="PART_Header" Grid.Column="1" ContentSource="Header" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="Center" />
                            </Grid>
                        </Border>

                        <!-- ItemsPresenter (for children) goes in Row 1 -->
                        <!-- It needs its own margin for indentation, handled by its children's templates -->
                        <ItemsPresenter x:Name="ItemsHost" Grid.Row="1" Visibility="Collapsed" />

                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="true">
                        <Setter TargetName="ItemsHost" Property="Visibility" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="HasItems" Value="false">
                            <Setter TargetName="Expander" Property="Visibility" Value="Hidden"/>
                        </Trigger>
                        <Trigger Property="IsSelected" Value="true">
                            <Setter TargetName="Bd" Property="Background" Value="{DynamicResource AccentBrush}" />
                            <!-- Use theme-appropriate foreground for selected item -->
                            <Setter Property="Foreground" Value="{DynamicResource WindowBackgroundBrush}"/>
                            <Setter TargetName="Bd" Property="Effect">
                                <Setter.Value>
                                    <!-- Apply Glow/Focus Effect from Theme -->
                                    <DynamicResource ResourceKey="FocusGlowEffect"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="true"/>
                                <Condition Property="IsSelectionActive" Value="false"/>
                            </MultiTrigger.Conditions>
                            <!-- Style for inactive selection -->
                            <Setter TargetName="Bd" Property="Background" Value="{DynamicResource BorderBrush}" />
                            <Setter Property="Foreground" Value="{DynamicResource TextForegroundBrush}" />
                            <Setter TargetName="Bd" Property="Effect" Value="{x:Null}" /> <!-- Remove glow on inactive -->
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.5" />
                            <Setter TargetName="Bd" Property="Effect" Value="{x:Null}" /> <!-- Remove effect on disabled -->
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- NEON: ScrollViewer/ScrollBar Styles -->
     <Style TargetType="ScrollViewer">
        <Setter Property="Background" Value="{DynamicResource WindowBackgroundBrush}"/>
    </Style>

    <Style TargetType="{x:Type ScrollBar}">
        <Setter Property="Stylus.IsPressAndHoldEnabled" Value="false"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="false"/>
        <Setter Property="Background" Value="{DynamicResource PanelBackgroundBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource SecondaryTextBrush}"/>
        <Setter Property="BorderThickness" Value="1,0"/>
        <Setter Property="Width" Value="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"/>
        <Setter Property="MinWidth" Value="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollBar}">
                    <Grid x:Name="Bg" SnapsToDevicePixels="true" Background="{TemplateBinding Background}">
                        <Track x:Name="PART_Track" IsDirectionReversed="true" IsEnabled="{TemplateBinding IsMouseOver}" >
                             <Track.Thumb>
                                 <Thumb Style="{DynamicResource ScrollBarThumbStyle}" />
                             </Track.Thumb>
                         </Track>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
         <Style.Triggers>
             <Trigger Property="Orientation" Value="Horizontal">
                 <Setter Property="Width" Value="Auto"/>
                 <Setter Property="MinWidth" Value="0"/>
                 <Setter Property="Height" Value="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarHeightKey}}"/>
                 <Setter Property="MinHeight" Value="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarHeightKey}}"/>
                 <Setter Property="BorderThickness" Value="0,1"/>
                 <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ScrollBar}">
                            <Grid x:Name="Bg" SnapsToDevicePixels="true" Background="{TemplateBinding Background}">
                                 <Track x:Name="PART_Track" IsEnabled="{TemplateBinding IsMouseOver}" >
                                     <Track.Thumb>
                                         <Thumb Style="{DynamicResource ScrollBarThumbStyle}" />
                                     </Track.Thumb>
                                 </Track>
                            </Grid>
                        </ControlTemplate>
                    </Setter.Value>
                 </Setter>
             </Trigger>
         </Style.Triggers>
    </Style>

    <Style x:Key="ScrollBarThumbStyle" TargetType="{x:Type Thumb}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border CornerRadius="4" Background="{DynamicResource SecondaryTextBrush}" BorderBrush="Transparent" BorderThickness="1" x:Name="ThumbBorder"/>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="ThumbBorder" Property="Background" Value="{DynamicResource TextForegroundBrush}"/> <!-- Darker thumb on hover -->
                        </Trigger>
                        <Trigger Property="IsDragging" Value="True">
                             <Setter TargetName="ThumbBorder" Property="Background" Value="{DynamicResource TextForegroundBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- NEON: AvalonEdit Specific Brushes -->
    <SolidColorBrush x:Key="EditorBackgroundBrush" Color="{StaticResource BaseBackgroundColor}"/>
    <SolidColorBrush x:Key="EditorForegroundBrush" Color="{StaticResource PrimaryForegroundColor}"/>
    <SolidColorBrush x:Key="Highlighting.Timestamp" Color="#FF00008B"/> <!-- DarkBlue -->
    <SolidColorBrush x:Key="Highlighting.Error" Color="{StaticResource ErrorColor}"/>
    <SolidColorBrush x:Key="Highlighting.Warning" Color="{StaticResource WarningColor}"/>
    <SolidColorBrush x:Key="Highlighting.Info" Color="{StaticResource InfoColor}"/>
    <StaticResource x:Key="Highlighting.FilterMatch.Background" ResourceKey="FilterHighlight.Default.Background"/>
    <SolidColorBrush x:Key="Highlighting.FilterMatch.Foreground" Color="{StaticResource PrimaryForegroundColor}"/>
    <SolidColorBrush x:Key="Highlighting.SearchMatch.Background" Color="{StaticResource HighlightSearchBackgroundColor}"/>
    <SolidColorBrush x:Key="Highlighting.SearchMatch.Foreground" Color="{StaticResource PrimaryForegroundColor}"/>

    <!-- NEON: Overview Ruler Brushes -->
    <SolidColorBrush x:Key="OverviewRuler.Background" Color="{StaticResource PanelBackgroundColor}"/>
    <SolidColorBrush x:Key="OverviewRuler.ThumbBrush" Color="#FFA9A9A9"/> <!-- Darker Gray -->
    <SolidColorBrush x:Key="OverviewRuler.BorderBrush" Color="{StaticResource BorderColor}"/>
    <SolidColorBrush x:Key="OverviewRuler.SearchMarkerBrush" Color="{StaticResource NeonAccentColor}"/>
    <SolidColorBrush x:Key="OverviewRuler.FilterMarkerBrush" Color="{StaticResource WarningColor}"/>
    <SolidColorBrush x:Key="OverviewRuler.ErrorMarkerBrush" Color="{StaticResource ErrorColor}"/>

    <!-- Key for the ToggleButton Style -->
    <Style x:Key="ComboBoxToggleButtonKey" TargetType="{x:Type ToggleButton}">
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="ClickMode" Value="Press"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="templateRoot" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="3" SnapsToDevicePixels="true">
                        <Border x:Name="splitBorder" BorderBrush="Transparent" BorderThickness="1" HorizontalAlignment="Right" Margin="0" SnapsToDevicePixels="true" Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}">
                            <Path x:Name="arrow" Data="F1 M 0,0 L 2.667,2.667 L 5.333,0 L 5.333,-1.78168 L 2.667,0.88501 L0,-1.78168 L0,0 Z" Fill="{DynamicResource ComboBoxArrowBrush}" HorizontalAlignment="Center" Margin="0" VerticalAlignment="Center"/>
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Fill" TargetName="arrow" Value="{DynamicResource AccentBrush}"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Fill" TargetName="arrow" Value="{DynamicResource AccentBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ComboBox Style -->
    <Style TargetType="{x:Type ComboBox}">
        <Setter Property="Padding" Value="6,3"/>
        <Setter Property="MinWidth" Value="120"/>
        <Setter Property="Background" Value="{DynamicResource ComboBoxBackgroundBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource ComboBoxBorderBrush}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Foreground" Value="{DynamicResource TextForegroundBrush}"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <Grid x:Name="MainGrid" SnapsToDevicePixels="true">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Width="0"/>
                        </Grid.ColumnDefinitions>
                        <Popup x:Name="PART_Popup" AllowsTransparency="true" Grid.ColumnSpan="2" IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Margin="1" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" Placement="Bottom">
                            <Border x:Name="DropDownBorder" Background="{DynamicResource ComboBoxDropdownBackgroundBrush}" BorderBrush="{DynamicResource ComboBoxDropdownBorderBrush}" BorderThickness="1" CornerRadius="3">
                                <ScrollViewer x:Name="DropDownScrollViewer">
                                    <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                </ScrollViewer>
                            </Border>
                        </Popup>
                        <ToggleButton x:Name="toggleButton" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Grid.ColumnSpan="2" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Style="{StaticResource ComboBoxToggleButtonKey}"/>
                        <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" Content="{TemplateBinding SelectionBoxItem}" ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" IsHitTestVisible="false" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasItems" Value="false">
                            <Setter Property="Height" TargetName="DropDownBorder" Value="95"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value="0.5"/>
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <!-- Neon Night: Glow effect -->
                            <!-- Clinical Neon: Accent border -->
                            <Setter Property="BorderBrush" TargetName="toggleButton" Value="{DynamicResource AccentBrush}"/>
                            <Setter Property="Effect" TargetName="toggleButton" Value="{DynamicResource FocusGlowEffect}"/> <!-- Or adjust border thickness for Light theme -->
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ComboBoxItem Style -->
    <Style TargetType="{x:Type ComboBoxItem}">
        <Setter Property="Padding" Value="4,3"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                    <Border x:Name="Bd" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
                        <ContentPresenter
                            x:Name="contentPresenter"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsHighlighted" Value="true">
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource ComboBoxItemHoverBackgroundBrush}"/>
                            <Setter Property="Foreground" Value="{DynamicResource ComboBoxItemHoverForegroundBrush}"/>
                            <Setter TargetName="Bd" Property="BorderBrush" Value="{DynamicResource AccentBrush}"/>
                            <Setter TargetName="Bd" Property="Effect" Value="{DynamicResource FocusGlowEffect}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value="0.5"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>
