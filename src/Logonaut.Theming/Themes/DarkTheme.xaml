<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:converters="clr-namespace:Logonaut.Theming.Converters"
                    xmlns:common="clr-namespace:Logonaut.Common;assembly=Logonaut.Common">

    <converters:TreeViewIndentConverter x:Key="TreeViewIndentConverter"/>

    <!-- NEON: Define Dark Theme Colors -->
    <Color x:Key="NeonAccentColor">#FF33CCFF</Color> <!-- Electric Cyan/Blue -->
    <Color x:Key="BaseBackgroundColor">#FF1A1A1A</Color> <!-- Very Dark Charcoal -->
    <Color x:Key="PanelBackgroundColor">#FF2C2C2E</Color> <!-- Lighter Dark Grey -->
    <Color x:Key="ControlBackgroundColor">#FF1A1A1A</Color> <!-- Dark Input/Control -->
    <Color x:Key="PrimaryForegroundColor">#FFEAEAEA</Color> <!-- Light Grey Text -->
    <Color x:Key="SecondaryForegroundColor">#FF8A8A8E</Color> <!-- Medium Grey Text/Icons -->
    <Color x:Key="BorderColor">#FF3A3A3C</Color>      <!-- Dark Grey Border -->
    <Color x:Key="ErrorColor">#FFFF1111</Color>       <!-- Vibrant Red -->
    <Color x:Key="WarningColor">#FFFFA500</Color>     <!-- Vibrant Orange -->
    <Color x:Key="InfoColor">#FF999999</Color>       <!-- Neutral Info Grey -->
    <Color x:Key="GlowColor">#CC33CCFF</Color>        <!-- Accent Color with Alpha for Glow -->
    <Color x:Key="HighlightFilterBackgroundColor">#FF808000</Color> <!-- Dark Yellow/Olive -->
    <Color x:Key="HighlightSearchBackgroundColor">#FF008B8B</Color> <!-- Dark Cyan -->
    <Color x:Key="ButtonHoverBackgroundColor">#FF4A4A4C</Color>

    <!-- Brushes for Simulator Overlay -->
    <SolidColorBrush x:Key="Overlay.BackgroundBrush" Color="#D0333333"/> <!-- Semi-transparent dark grey -->
    <SolidColorBrush x:Key="Overlay.ForegroundBrush" Color="#FFFFFFFF"/> <!-- White Text -->

    <!-- NEON: Define Brushes -->
    <SolidColorBrush x:Key="AccentBrush" Color="{StaticResource NeonAccentColor}"/>
    <SolidColorBrush x:Key="WindowBackgroundBrush" Color="{StaticResource BaseBackgroundColor}"/>
    <SolidColorBrush x:Key="PanelBackgroundBrush" Color="{StaticResource PanelBackgroundColor}"/>
    <SolidColorBrush x:Key="ControlBackgroundBrush" Color="{StaticResource ControlBackgroundColor}"/>
    <SolidColorBrush x:Key="TextForegroundBrush" Color="{StaticResource PrimaryForegroundColor}"/>
    <SolidColorBrush x:Key="SecondaryTextBrush" Color="{StaticResource SecondaryForegroundColor}"/>
    <SolidColorBrush x:Key="BorderBrush" Color="{StaticResource BorderColor}"/>
    <SolidColorBrush x:Key="ErrorBrush" Color="{StaticResource ErrorColor}"/>
    <SolidColorBrush x:Key="WarningBrush" Color="{StaticResource WarningColor}"/>
    <SolidColorBrush x:Key="InfoBrush" Color="{StaticResource InfoColor}"/>
    <SolidColorBrush x:Key="HighlightFilterBackgroundBrush" Color="{StaticResource HighlightFilterBackgroundColor}"/>
    <SolidColorBrush x:Key="HighlightSearchBackgroundBrush" Color="{StaticResource HighlightSearchBackgroundColor}"/>
    <SolidColorBrush x:Key="DividerBrush" Color="{StaticResource BorderColor}" /> <!-- For VerticalLineMargin/Separators -->
    <SolidColorBrush x:Key="ChunkSeparatorBrush" Color="#307070"/>

    <SolidColorBrush x:Key="AnchorButton.Static.Background" Color="#FF38383A"/> <!-- Slightly lighter than PanelBackground -->
    <SolidColorBrush x:Key="AnchorButton.Static.Border" Color="#FF4A4A4C"/>    <!-- Subtle border -->
    <SolidColorBrush x:Key="AnchorButton.Checked.Background" Color="#4C00BFFF"/> <!-- Semi-transparent Accent -->
    <SolidColorBrush x:Key="AnchorButton.MouseOver.Background" Color="#FF4A4A4C"/>

    <!-- CheckBox Specific Brushes -->
    <SolidColorBrush x:Key="CheckBox.Static.Background" Color="Transparent"/>
    <!-- Make the static border visible against the dark background -->
    <SolidColorBrush x:Key="CheckBox.Static.BorderBrush" Color="#888888"/> <!-- A visible gray -->
    <SolidColorBrush x:Key="CheckBox.MouseOver.Background" Color="#303030"/> <!-- Subtle hover background -->
    <SolidColorBrush x:Key="CheckBox.Pressed.Background" Color="#404040"/>
    <SolidColorBrush x:Key="CheckBox.Disabled.Foreground" Color="#666666"/>
    <SolidColorBrush x:Key="CheckBox.Disabled.Background" Color="#202020"/>
    <SolidColorBrush x:Key="CheckBox.Disabled.BorderBrush" Color="#444444"/>

    <!-- Persistent line highlihting -->
    <SolidColorBrush x:Key="PersistedHighlightBrush" Color="#404040" /> <!-- Dark Gray -->

    <!-- ComboBox misc. brushes -->
    <SolidColorBrush x:Key="ComboBoxArrowBrush" Color="{StaticResource SecondaryForegroundColor}"/>
    <SolidColorBrush x:Key="ComboBoxBackgroundBrush" Color="{StaticResource ControlBackgroundColor}"/>
    <SolidColorBrush x:Key="ComboBoxBorderBrush" Color="{StaticResource BorderColor}"/>
    <SolidColorBrush x:Key="ComboBoxDropdownBackgroundBrush" Color="{StaticResource PanelBackgroundColor}"/>
    <SolidColorBrush x:Key="ComboBoxDropdownBorderBrush" Color="{StaticResource BorderColor}"/>

    <!-- Hover state for items in the popup list -->
    <SolidColorBrush x:Key="ComboBoxItemHoverBackgroundBrush" Color="{StaticResource PanelBackgroundColor}"/>
    <SolidColorBrush x:Key="ComboBoxItemHoverForegroundBrush" Color="{StaticResource PrimaryForegroundColor}"/>

    <!-- NEON NIGHT Spinner -->
    <SolidColorBrush x:Key="SpinnerPrimaryBrush" Color="{StaticResource NeonAccentColor}"/>

    <SolidColorBrush x:Key="ButtonHoverBackgroundBrush" Color="{StaticResource ButtonHoverBackgroundColor}" />

    <!-- NEON: Glow Effect -->
    <DropShadowEffect x:Key="FocusGlowEffect" Color="{StaticResource GlowColor}" ShadowDepth="0" BlurRadius="8" Opacity="0.9"/>
    <DropShadowEffect x:Key="PanelShadowEffect" Color="#FF000000" ShadowDepth="3" BlurRadius="8" Opacity="0.4"/>
    <DropShadowEffect x:Key="InnerShadowEffect" Color="#AA000000" ShadowDepth="1" BlurRadius="2" Opacity="0.5"/>

    <!-- NEON: Define Subtle Resting Shadow for Buttons -->
    <DropShadowEffect x:Key="ButtonRestingShadowEffect" Color="#7F000000" ShadowDepth="2" BlurRadius="4" Opacity="0.3"/>
    <!-- NEON: Update Gradient for Button Background -->
    <LinearGradientBrush x:Key="ButtonRestingGradientBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Color="#FF444444" Offset="0.0"/> <!-- Slightly lighter top -->
        <GradientStop Color="#FF333333" Offset="1.0"/> <!-- Target resting color at bottom -->
    </LinearGradientBrush>

    <Style x:Key="FilterPaletteItemStyle" TargetType="ContentPresenter">
        <Setter Property="Margin" Value="2"/>
    </Style>

    <DataTemplate x:Key="FilterPaletteItemTemplate" DataType="{x:Type common:FilterTypeDescriptor}">
        <Border Background="{DynamicResource ControlBackgroundBrush}"
                BorderBrush="{DynamicResource BorderBrush}"
                BorderThickness="1" CornerRadius="3" Padding="5,3" MinWidth="80"
                Cursor="Hand">
            <StackPanel Orientation="Horizontal">
                <ContentControl Content="{Binding TypeIdentifier, Converter={StaticResource FilterTypeToIconConverter}}"
                              VerticalAlignment="Center" Margin="0,0,4,0" Focusable="False"/>
                <TextBlock Text="{Binding DisplayName}" VerticalAlignment="Center"
                           Foreground="{DynamicResource TextForegroundBrush}"/>
            </StackPanel>
        </Border>
    </DataTemplate>

    <Style x:Key="SimulatorToggleButtonStyle" TargetType="ToggleButton">
        <!-- Set default visual properties using DynamicResource - MIMIC BUTTON -->
        <Setter Property="Background" Value="{StaticResource ButtonRestingGradientBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource TextForegroundBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Padding" Value="10,5"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <!-- Resting Shadow Effect is set via Template now -->

        <!-- *** ADD EXPLICIT ControlTemplate *** -->
        <Setter Property="Template">
            <Setter.Value>
            <ControlTemplate TargetType="ToggleButton">
                <Border x:Name="templateRoot"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="4"
                        SnapsToDevicePixels="True">
                    <Border.Effect>
                        <StaticResource ResourceKey="ButtonRestingShadowEffect"/>
                    </Border.Effect>
                    <ContentPresenter x:Name="contentPresenter"
                                      ContentSource="Content"
                                      HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                      VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                      RecognizesAccessKey="True">

                        <!-- *** ADD LOCAL STYLE FOR TEXTBLOCK *** -->
                        <ContentPresenter.Resources>
                            <Style TargetType="TextBlock">
                                <Setter Property="Foreground" Value="{Binding Path=(TextElement.Foreground), RelativeSource={RelativeSource AncestorType=ToggleButton}}" />
                                <Setter Property="FontSize" Value="{Binding Path=FontSize, RelativeSource={RelativeSource AncestorType=ToggleButton}}"/>
                                <Setter Property="VerticalAlignment" Value="Center"/>
                            </Style>
                        </ContentPresenter.Resources>
                        <!-- *** END OF LOCAL STYLE *** -->

                    </ContentPresenter>
                </Border>
            </ControlTemplate>
            </Setter.Value>
        </Setter>

        <!-- Default Content/ToolTip (Start state) -->
        <Setter Property="Content" Value="Start"/>
        <Setter Property="ToolTip" Value="Start the log simulator"/>

        <Style.Triggers>
            <!-- Trigger for the "Stop" state (IsChecked=True) -->
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Content" Value="Stop"/>
                <Setter Property="ToolTip" Value="Stop the log simulator"/>
                <Setter Property="Background" Value="{DynamicResource AccentBrush}"/>
                <Setter Property="Foreground" Value="{DynamicResource WindowBackgroundBrush}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource AccentBrush}"/>
                <Setter Property="Effect" Value="{DynamicResource FocusGlowEffect}"/>
            </Trigger>

            <!-- Hover Trigger (when NOT checked) - Mimic Button Hover -->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True"/>
                    <Condition Property="IsChecked" Value="False"/>
                </MultiTrigger.Conditions>
                <!-- Set properties on the ToggleButton -->
                <Setter Property="BorderBrush" Value="{DynamicResource AccentBrush}" />
                <Setter Property="Effect" Value="{DynamicResource FocusGlowEffect}"/>
                <!-- Keep resting Background -->
                <Setter Property="Background" Value="{StaticResource ButtonRestingGradientBrush}"/>
            </MultiTrigger>

            <!-- Pressed Trigger (when NOT checked) - Mimic Button Press -->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsPressed" Value="True"/>
                    <Condition Property="IsChecked" Value="False"/>
                </MultiTrigger.Conditions>
                <!-- Set properties on the ToggleButton -->
                <Setter Property="Background" Value="{DynamicResource ControlBackgroundBrush}" />
                <Setter Property="Effect" Value="{DynamicResource FocusGlowEffect}" />
                <!-- Optional: TranslateTransform like button -->
                <!-- <Setter Property="RenderTransform"> ... </Setter> -->
            </MultiTrigger>

            <!-- Hover/Pressed triggers WHEN CHECKED (Optional Refinements) -->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True"/>
                    <Condition Property="IsChecked" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource AccentBrush}"/>
                <Setter Property="Foreground" Value="{DynamicResource WindowBackgroundBrush}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource AccentBrush}"/>
                <Setter Property="Effect" Value="{DynamicResource FocusGlowEffect}"/>
                <Setter Property="Opacity" Value="0.9" />
            </MultiTrigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsPressed" Value="True"/>
                    <Condition Property="IsChecked" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource AccentBrush}"/>
                <Setter Property="Foreground" Value="{DynamicResource WindowBackgroundBrush}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource AccentBrush}"/>
                <Setter Property="Effect" Value="{DynamicResource FocusGlowEffect}"/>
                <Setter Property="Opacity" Value="0.8"/>
            </MultiTrigger>

            <!-- Disabled State -->
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.5" />
                <Setter Property="Background" Value="{DynamicResource ControlBackgroundBrush}"/>
                <Setter Property="Foreground" Value="{DynamicResource SecondaryTextBrush}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}"/>
                <Setter Property="Effect" Value="{x:Null}" />
            </Trigger>

            <!-- Ensure resting shadow applied when NOT hovered/pressed/checked -->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="False"/>
                    <Condition Property="IsPressed" Value="False"/>
                    <Condition Property="IsChecked" Value="False"/>
                    <Condition Property="IsEnabled" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{StaticResource ButtonRestingGradientBrush}"/>
                <Setter Property="Foreground" Value="{DynamicResource TextForegroundBrush}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}"/>
                <Setter Property="Effect" Value="{StaticResource ButtonRestingShadowEffect}"/>
                <Setter Property="Opacity" Value="1.0"/>
            </MultiTrigger>

        </Style.Triggers>
    </Style>

    <Style x:Key="OverlayCloseButtonStyle" TargetType="Button">
        <!-- Basic properties remain mostly the same -->
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{DynamicResource SecondaryTextBrush}"/>
        <Setter Property="BorderThickness" Value="1"/> <!-- Add border for glow target -->
        <Setter Property="BorderBrush" Value="Transparent"/> <!-- Keep border transparent initially -->
        <Setter Property="Padding" Value="0"/>
        <Setter Property="Width" Value="20"/>
        <Setter Property="Height" Value="20"/>
        <Setter Property="HorizontalAlignment" Value="Right"/>
        <Setter Property="VerticalAlignment" Value="Top"/>
        <Setter Property="Margin" Value="0,0,0,0"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="ToolTip" Value="Close Simulator Controls"/>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <!-- Use a Border as the main container now for the Glow effect -->
                    <Border x:Name="ButtonBorder"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="10"
                            SnapsToDevicePixels="True">
                        <!-- Effect will be applied here -->
                        <TextBlock Text="✕"
                                   HorizontalAlignment="Center"
                                   VerticalAlignment="Center"
                                   Foreground="{TemplateBinding Foreground}"
                                   FontSize="{TemplateBinding FontSize}"
                                   FontWeight="{TemplateBinding FontWeight}"
                                   Margin="0,0,0,1"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <!-- Change BorderBrush to make it visible on hover -->
                            <Setter TargetName="ButtonBorder" Property="BorderBrush" Value="{DynamicResource AccentBrush}"/>
                            <!-- Apply the standard Focus Glow Effect -->
                            <Setter TargetName="ButtonBorder" Property="Effect" Value="{StaticResource FocusGlowEffect}"/>
                            <!-- Make 'X' more prominent -->
                            <Setter Property="Foreground" Value="{DynamicResource TextForegroundBrush}"/>
                            <!-- Optional: Slight background change on hover -->
                            <Setter TargetName="ButtonBorder" Property="Background" Value="#20FFFFFF"/> <!-- Very faint white -->
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <!-- Use AccentBrush for background when pressed -->
                            <Setter TargetName="ButtonBorder" Property="Background" Value="{DynamicResource AccentBrush}"/>
                            <!-- Keep the Glow Effect -->
                            <Setter TargetName="ButtonBorder" Property="Effect" Value="{StaticResource FocusGlowEffect}"/>
                            <!-- Change 'X' color for contrast -->
                            <Setter Property="Foreground" Value="{DynamicResource WindowBackgroundBrush}"/>
                            <Setter TargetName="ButtonBorder" Property="BorderBrush" Value="{DynamicResource AccentBrush}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.5"/>
                            <!-- Remove effect when disabled -->
                            <Setter TargetName="ButtonBorder" Property="Effect" Value="{x:Null}"/>
                        </Trigger>
                        <!-- Ensure effect is null when not hovered/pressed -->
                        <MultiTrigger>
                             <MultiTrigger.Conditions>
                                 <Condition Property="IsMouseOver" Value="False"/>
                                 <Condition Property="IsPressed" Value="False"/>
                             </MultiTrigger.Conditions>
                             <Setter TargetName="ButtonBorder" Property="Effect" Value="{x:Null}"/>
                             <Setter TargetName="ButtonBorder" Property="BorderBrush" Value="Transparent"/>
                             <Setter TargetName="ButtonBorder" Property="Background" Value="Transparent"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Dark Theme ToolTip Style -->
    <Style TargetType="ToolTip">
        <!-- Setters for properties directly on ToolTip or used by TemplateBinding -->
        <Setter Property="Background" Value="{DynamicResource PanelBackgroundBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource TextForegroundBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Padding" Value="5,3"/>
        <!-- Define the custom template -->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToolTip">
                    <!-- The Border IS the visual root now -->
                    <Border Name="RootBorder"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="3"
                            Padding="{TemplateBinding Padding}"
                            SnapsToDevicePixels="True">
                        <!-- ContentPresenter displays the ToolTip's content -->
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                        VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                        SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                    </Border>
                    <!-- Optional: Add triggers if needed for states like IsOpen -->
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Effect" Value="{StaticResource PanelShadowEffect}"/>
    </Style>

    <!-- NEON: Global Styles -->
    <Style TargetType="Window">
        <Setter Property="Background" Value="{DynamicResource WindowBackgroundBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource TextForegroundBrush}"/>
    </Style>

    <Style TargetType="TextBlock">
        <Setter Property="Foreground" Value="{DynamicResource TextForegroundBrush}"/>
    </Style>

    <Style TargetType="Border" x:Key="CardPanelStyle">
        <Setter Property="CornerRadius" Value="8" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="Background" Value="{DynamicResource PanelBackgroundBrush}" />
        <Setter Property="Padding" Value="10" />
        <Setter Property="Margin" Value="5" />
        <Setter Property="Effect" Value="{StaticResource PanelShadowEffect}"/>
    </Style>

    <!-- NEON: Button Style -->
    <Style TargetType="Button">
        <!-- NEON: Use Subtle Gradient for resting background -->
        <Setter Property="Background" Value="{StaticResource ButtonRestingGradientBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextForegroundBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Padding" Value="12,7" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border x:Name="ButtonBorder"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="4">
                        <Border.Effect>
                             <!-- NEON: Apply resting shadow by default -->
                             <StaticResource ResourceKey="ButtonRestingShadowEffect"/>
                         </Border.Effect>
                        <ContentPresenter x:Name="contentPresenter"
                                          HorizontalAlignment="Center"
                                          VerticalAlignment="Center"
                                          RecognizesAccessKey="True">
                             <ContentPresenter.RenderTransform>
                                 <TranslateTransform X="0" Y="0" />
                             </ContentPresenter.RenderTransform>
                        </ContentPresenter>
                    </Border>
                    <ControlTemplate.Triggers>
                         <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="ButtonBorder" Property="BorderBrush" Value="{DynamicResource AccentBrush}" />
                            <!-- NEON: Glow replaces resting shadow on hover -->
                            <Setter TargetName="ButtonBorder" Property="Effect" Value="{StaticResource FocusGlowEffect}" />
                            <Setter TargetName="contentPresenter" Property="RenderTransform">
                                <Setter.Value><TranslateTransform X="0" Y="0" /></Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="ButtonBorder" Property="Background" Value="{DynamicResource ControlBackgroundBrush}" />
                            <!-- NEON: Keep Glow, replaces resting shadow -->
                            <Setter TargetName="ButtonBorder" Property="Effect" Value="{StaticResource FocusGlowEffect}" />
                            <Setter TargetName="contentPresenter" Property="RenderTransform">
                                <Setter.Value><TranslateTransform X="1" Y="1" /></Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.5" />
                            <Setter TargetName="ButtonBorder" Property="Effect" Value="{x:Null}" />
                            <Setter TargetName="contentPresenter" Property="RenderTransform">
                                <Setter.Value><TranslateTransform X="0" Y="0" /></Setter.Value>
                            </Setter>
                        </Trigger>
                         <!-- NEON: Explicitly restore resting shadow when not hovered/pressed/disabled -->
                         <MultiTrigger>
                             <MultiTrigger.Conditions>
                                 <Condition Property="IsMouseOver" Value="False"/>
                                 <Condition Property="IsPressed" Value="False"/>
                                 <Condition Property="IsEnabled" Value="True"/>
                             </MultiTrigger.Conditions>
                            <!-- NEON: Restore resting shadow -->
                            <Setter TargetName="ButtonBorder" Property="Effect" Value="{StaticResource ButtonRestingShadowEffect}"/>
                            <Setter TargetName="contentPresenter" Property="RenderTransform">
                                <Setter.Value><TranslateTransform X="0" Y="0" /></Setter.Value>
                            </Setter>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- NEON: TextBox Style -->
    <Style TargetType="TextBox">
        <Setter Property="Background" Value="{DynamicResource ControlBackgroundBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource TextForegroundBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Padding" Value="3"/>
        <Setter Property="CaretBrush" Value="{DynamicResource TextForegroundBrush}"/>
        <Setter Property="SelectionBrush" Value="{DynamicResource AccentBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TextBox">
                    <Border x:Name="Bd"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="3">
                        <ScrollViewer x:Name="PART_ContentHost" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter TargetName="Bd" Property="BorderBrush" Value="{DynamicResource AccentBrush}"/>
                            <Setter TargetName="Bd" Property="Effect" Value="{StaticResource FocusGlowEffect}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- NEON: CheckBox Style -->
    <Style TargetType="CheckBox">
        <Setter Property="Foreground" Value="{DynamicResource TextForegroundBrush}"/>
        <Setter Property="Padding" Value="4,0,0,0"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="CheckBox">
                    <BulletDecorator Background="Transparent" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                        <BulletDecorator.Bullet>
                            <Border x:Name="OuterBorder"
                                    Width="13" Height="13"
                                    BorderBrush="{DynamicResource CheckBox.Static.BorderBrush}"
                                    Background="{DynamicResource CheckBox.Static.Background}"
                                    BorderThickness="1"
                                    CornerRadius="2">
                                <Path x:Name="CheckMark"
                                    Width="7" Height="7"
                                    SnapsToDevicePixels="False"
                                    Stroke="{DynamicResource AccentBrush}"
                                    StrokeThickness="2"
                                    Data="M 0 0 L 7 7 M 0 7 L 7 0"
                                    Visibility="Collapsed"/>
                            </Border>
                        </BulletDecorator.Bullet>
                        <ContentPresenter Margin="{TemplateBinding Padding}"
                                        VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                        HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                        RecognizesAccessKey="True"/>
                    </BulletDecorator>
                    <ControlTemplate.Triggers>
                        <!-- Trigger for Checked state -->
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="CheckMark" Property="Visibility" Value="Visible"/>
                            <!-- Optional: Change background/border when checked if desired -->
                            <!-- <Setter TargetName="OuterBorder" Property="Background" Value="{DynamicResource CheckBox.Checked.Background}"/> -->
                            <!-- <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource CheckBox.Checked.BorderBrush}"/> -->
                        </Trigger>
                        <!-- Null state (Indeterminate) - Optional -->
                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <!-- Style for indeterminate state if needed -->
                            <!-- <Setter TargetName="CheckMark" Property="Data" Value="M 0 3.5 L 7 3.5" /> -->
                            <!-- <Setter TargetName="CheckMark" Property="Visibility" Value="Visible"/> -->
                        </Trigger>
                        <!-- Trigger for MouseOver -->
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="OuterBorder" Property="Background" Value="{DynamicResource CheckBox.MouseOver.Background}"/>
                            <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource AccentBrush}"/>
                            <Setter TargetName="OuterBorder" Property="Effect" Value="{StaticResource FocusGlowEffect}"/>
                        </Trigger>
                        <!-- Trigger for Pressed -->
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="OuterBorder" Property="Background" Value="{DynamicResource CheckBox.Pressed.Background}"/>
                            <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource AccentBrush}"/>
                        </Trigger>
                        <!-- Trigger for Focused -->
                        <Trigger Property="IsFocused" Value="True">
                            <!-- Use AccentBrush for focus indication -->
                            <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource AccentBrush}"/>
                            <Setter TargetName="OuterBorder" Property="Effect" Value="{StaticResource FocusGlowEffect}"/>
                        </Trigger>
                        <!-- Trigger for Disabled -->
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.7" /> <!-- Adjust opacity if needed -->
                            <Setter Property="Foreground" Value="{DynamicResource CheckBox.Disabled.Foreground}"/>
                            <Setter TargetName="OuterBorder" Property="Background" Value="{DynamicResource CheckBox.Disabled.Background}"/>
                            <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource CheckBox.Disabled.BorderBrush}"/>
                            <!-- Checkmark uses foreground, so it gets dimmed too -->
                            <!-- <Setter TargetName="CheckMark" Property="Stroke" Value="{DynamicResource CheckBox.Disabled.Foreground}"/> -->
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

     <!-- NEON: ToggleSwitch Style (Replacing ToggleButton) -->
    <Style x:Key="ToggleSwitchStyle" TargetType="ToggleButton">
        <Setter Property="Foreground" Value="{DynamicResource TextForegroundBrush}" />
        <Setter Property="Background" Value="{DynamicResource ControlBackgroundBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="Width" Value="44"/>
        <Setter Property="Height" Value="20"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Grid>
                        <Border x:Name="BackgroundBorder" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1" CornerRadius="10">
                             <Border.Effect>
                                <DropShadowEffect x:Name="GlowEffect" Color="{StaticResource GlowColor}" ShadowDepth="0" BlurRadius="0" Opacity="0"/>
                            </Border.Effect>
                        </Border>
                        <Ellipse x:Name="Thumb" Fill="{DynamicResource SecondaryTextBrush}" HorizontalAlignment="Left" Width="16" Height="16" Margin="2"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="BackgroundBorder" Property="Background" Value="{DynamicResource AccentBrush}" />
                            <Setter TargetName="BackgroundBorder" Property="BorderBrush" Value="{DynamicResource AccentBrush}" />
                            <!-- Set the Effect property ON THE BORDER -->
                            <Setter TargetName="BackgroundBorder" Property="Effect">
                                <Setter.Value>
                                    <!-- Define the glow effect for the checked state -->
                                    <DropShadowEffect Color="{StaticResource GlowColor}" ShadowDepth="0" BlurRadius="8" Opacity="0.9"/>
                                </Setter.Value>
                            </Setter>
                            <Setter TargetName="Thumb" Property="HorizontalAlignment" Value="Right"/>
                            <Setter TargetName="Thumb" Property="Fill" Value="{DynamicResource WindowBackgroundBrush}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="BackgroundBorder" Property="BorderBrush" Value="{DynamicResource AccentBrush}" />
                             <!-- Set the Effect property ON THE BORDER -->
                             <Setter TargetName="BackgroundBorder" Property="Effect">
                                <Setter.Value>
                                     <!-- Define the glow effect for the hover state -->
                                    <DropShadowEffect Color="{StaticResource GlowColor}" ShadowDepth="0" BlurRadius="8" Opacity="0.9"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                         <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.5" />
                        </Trigger>
                        <!-- NEON: Add trigger to explicitly remove the glow when not hovered and not checked -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="False"/>
                                <Condition Property="IsChecked" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="BackgroundBorder" Property="Effect">
                               <Setter.Value>
                                    <!-- Define the default (invisible) effect -->
                                   <DropShadowEffect Color="{StaticResource GlowColor}" ShadowDepth="0" BlurRadius="0" Opacity="0"/>
                               </Setter.Value>
                           </Setter>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ExpandCollapseToggleStyle" TargetType="ToggleButton">
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Width" Value="19"/>
        <Setter Property="Height" Value="13"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Border Width="19" Height="13" Background="Transparent">
                        <Path x:Name="ExpandPath"
                              HorizontalAlignment="Center" VerticalAlignment="Center"
                              Data="M 4 0 L 8 4 L 4 8 Z"> <!-- Default: Arrow pointing right -->
                            <Path.Fill>
                                <!-- Use SecondaryTextBrush for arrow color -->
                                <DynamicResource ResourceKey="SecondaryTextBrush"/>
                            </Path.Fill>
                        </Path>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <!-- Change arrow data to point down when expanded -->
                            <Setter TargetName="ExpandPath" Property="Data" Value="M 0 4 L 4 8 L 8 4 Z"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                             <Setter TargetName="ExpandPath" Property="Fill">
                                <Setter.Value>
                                    <!-- Use AccentBrush on hover -->
                                    <DynamicResource ResourceKey="AccentBrush"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <!-- NEON: Added trigger for IsEnabled -->
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.5"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- NEON: Menu Styles -->
    <Style TargetType="Menu">
        <Setter Property="Background" Value="{DynamicResource PanelBackgroundBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextForegroundBrush}" />
    </Style>

    <Style TargetType="MenuItem">
        <!-- Default state -->
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource TextForegroundBrush}" />
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="1"/>
         <!-- NEON: Increased Padding slightly -->
        <Setter Property="Padding" Value="8,5"/>
        <!-- NEON: Add Template for more control -->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="MenuItem">
                    <!-- Use Border for background, corners, and effects -->
                    <Border x:Name="Bd"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Padding="{TemplateBinding Padding}"
                            SnapsToDevicePixels="true"
                            CornerRadius="3"> <!-- NEON: Added CornerRadius -->
                         <Border.Effect>
                             <!-- Placeholder for Glow -->
                              <DropShadowEffect ShadowDepth="0" BlurRadius="0" Opacity="0"/>
                         </Border.Effect>
                        <!-- Standard MenuItem content structure -->
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" SharedSizeGroup="MenuItemIconColumnGroup"/>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="Auto" SharedSizeGroup="MenuItemIGTColumnGroup"/>
                                <ColumnDefinition Width="14"/>
                            </Grid.ColumnDefinitions>
                             <!-- Icon Area -->
                            <ContentPresenter x:Name="Icon" Grid.Column="0" Margin="1" VerticalAlignment="Center" ContentSource="Icon"/>
                             <!-- Checkmark for IsChecked -->
                             <Grid x:Name="GlyphPanel" Grid.Column="0" Visibility="Hidden" Margin="1" VerticalAlignment="Center" HorizontalAlignment="Center" Width="16" Height="16">
                                 <Path x:Name="Glyph" Data="M0,5 L3,8 L8,0" Stroke="{TemplateBinding Foreground}" StrokeThickness="2" />
                             </Grid>
                             <!-- Header Content -->
                            <ContentPresenter Grid.Column="1" Margin="{TemplateBinding Padding}" ContentSource="Header" RecognizesAccessKey="True" VerticalAlignment="Center"/>
                             <!-- Input Gesture Text (e.g., Ctrl+O) -->
                             <TextBlock Grid.Column="2" Margin="{TemplateBinding Padding}" Text="{TemplateBinding InputGestureText}" VerticalAlignment="Center"/>
                            <!-- Arrow for Submenu -->
                             <Path x:Name="RightArrow" Grid.Column="3" Data="M0,0 L4,3.5 L0,7 Z" Fill="{TemplateBinding Foreground}" Margin="4,0,0,0" VerticalAlignment="Center" Visibility="Collapsed"/>
                             <!-- Submenu Popup -->
                             <Popup x:Name="PART_Popup" AllowsTransparency="true" Focusable="false" IsOpen="{Binding IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}" PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}" Placement="Right">
                                <!-- NEON: Use PanelBackground for Popup -->
                                <Border x:Name="SubMenuBorder" Background="{DynamicResource PanelBackgroundBrush}" BorderBrush="{DynamicResource BorderBrush}" BorderThickness="1" CornerRadius="3">
                                    <ScrollViewer CanContentScroll="true" Style="{DynamicResource {ComponentResourceKey ResourceId=MenuScrollViewer, TypeInTargetAssembly={x:Type FrameworkElement}}}">
                                        <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Cycle" Grid.IsSharedSizeScope="true" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" KeyboardNavigation.TabNavigation="Cycle"/>
                                    </ScrollViewer>
                                </Border>
                            </Popup>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <!-- Handle Icon Visibility -->
                        <Trigger Property="Icon" Value="{x:Null}">
                            <Setter TargetName="Icon" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                         <!-- Handle Checkmark Visibility -->
                         <Trigger Property="IsChecked" Value="true">
                            <Setter TargetName="GlyphPanel" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="Icon" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                         <!-- Handle Submenu Arrow Visibility -->
                        <Trigger Property="Role" Value="SubmenuHeader">
                            <Setter TargetName="RightArrow" Property="Visibility" Value="Visible"/>
                        </Trigger>
                         <!-- Highlighted/Hover State -->
                        <Trigger Property="IsHighlighted" Value="True">
                             <!-- NEON: Apply Accent Background, matching Text, and Glow -->
                            <Setter TargetName="Bd" Property="Background" Value="{DynamicResource AccentBrush}"/>
                            <!-- CORRECT: Use WindowBackgroundBrush (which uses BaseBackgroundColor) -->
                            <Setter Property="Foreground" Value="{DynamicResource WindowBackgroundBrush}"/>
                            <Setter TargetName="Bd" Property="Effect" Value="{StaticResource FocusGlowEffect}" />
                            <!-- Ensure Popup border matches highlight -->
                             <Setter TargetName="SubMenuBorder" Property="BorderBrush" Value="{DynamicResource AccentBrush}"/>
                        </Trigger>
                        <!-- Disabled State -->
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.5" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- NEON: TreeView Styles -->
    <Style TargetType="TreeView">
        <Setter Property="Background" Value="{DynamicResource PanelBackgroundBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource TextForegroundBrush}"/>
        <Setter Property="BorderThickness" Value="0"/>
    </Style>

    <Style TargetType="TreeViewItem">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Padding" Value="1"/>
        <!-- Bind IsExpanded to the ViewModel -->
        <Setter Property="IsExpanded" Value="{Binding IsExpanded, Mode=TwoWay}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TreeViewItem">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/> <!-- Row for the header -->
                            <RowDefinition Height="*"/>    <!-- Row for the items (children), takes remaining space -->
                        </Grid.RowDefinitions>

                        <!-- Header Border (stays in Row 0) -->
                        <Border Name="Bd"
                                Grid.Row="0"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Padding="{TemplateBinding Padding}">
                            <!-- The inner Grid for Expander/Header Content -->
                            <Grid Margin="{Binding RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource TreeViewIndentConverter}}">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="19" /> <!-- Expander -->
                                    <ColumnDefinition Width="Auto" /> <!-- Icon/Content Presenter -->
                                    <ColumnDefinition Width="*" /> <!-- Takes rest of header width -->
                                </Grid.ColumnDefinitions>
                                <ToggleButton x:Name="Expander" Style="{StaticResource ExpandCollapseToggleStyle}" IsChecked="{Binding Path=IsExpanded, RelativeSource={RelativeSource TemplatedParent}}" ClickMode="Press"/>
                                <ContentPresenter x:Name="PART_Header" Grid.Column="1" ContentSource="Header" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="Center" />
                            </Grid>
                        </Border>

                        <!-- ItemsPresenter (for children) goes in Row 1 -->
                        <!-- It needs its own margin for indentation, handled by its children's templates -->
                        <ItemsPresenter x:Name="ItemsHost" Grid.Row="1" Visibility="Collapsed" />

                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="true">
                            <Setter TargetName="ItemsHost" Property="Visibility" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="HasItems" Value="false">
                            <Setter TargetName="Expander" Property="Visibility" Value="Hidden"/>
                        </Trigger>
                        <Trigger Property="IsSelected" Value="true">
                            <Setter TargetName="Bd" Property="Background" Value="{DynamicResource AccentBrush}" />
                            <!-- Use theme-appropriate foreground for selected item -->
                            <Setter Property="Foreground" Value="{DynamicResource WindowBackgroundBrush}"/>
                            <Setter TargetName="Bd" Property="Effect">
                                <Setter.Value>
                                    <!-- Apply Glow/Focus Effect from Theme -->
                                    <DynamicResource ResourceKey="FocusGlowEffect"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="true"/>
                                <Condition Property="IsSelectionActive" Value="false"/>
                            </MultiTrigger.Conditions>
                            <!-- Style for inactive selection -->
                            <Setter TargetName="Bd" Property="Background" Value="{DynamicResource BorderBrush}" />
                            <Setter Property="Foreground" Value="{DynamicResource TextForegroundBrush}" />
                            <Setter TargetName="Bd" Property="Effect" Value="{x:Null}" /> <!-- Remove glow on inactive -->
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.5" />
                            <Setter TargetName="Bd" Property="Effect" Value="{x:Null}" /> <!-- Remove effect on disabled -->
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- NEON: ScrollViewer/ScrollBar Styles -->
    <Style TargetType="ScrollViewer">
        <Setter Property="Background" Value="{DynamicResource WindowBackgroundBrush}"/>
    </Style>

     <Style TargetType="{x:Type ScrollBar}">
        <Setter Property="Stylus.IsPressAndHoldEnabled" Value="false"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="false"/>
        <Setter Property="Background" Value="{DynamicResource PanelBackgroundBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource TextForegroundBrush}"/>
        <Setter Property="BorderThickness" Value="1,0"/>
        <Setter Property="Width" Value="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"/>
        <Setter Property="MinWidth" Value="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollBar}">
                    <Grid x:Name="Bg" SnapsToDevicePixels="true" Background="{TemplateBinding Background}">
                        <Track x:Name="PART_Track" IsDirectionReversed="true" IsEnabled="{TemplateBinding IsMouseOver}" >
                             <Track.Thumb>
                                 <Thumb Style="{DynamicResource ScrollBarThumbStyle}" />
                             </Track.Thumb>
                         </Track>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
         <Style.Triggers>
             <Trigger Property="Orientation" Value="Horizontal">
                 <Setter Property="Width" Value="Auto"/>
                 <Setter Property="MinWidth" Value="0"/>
                 <Setter Property="Height" Value="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarHeightKey}}"/>
                 <Setter Property="MinHeight" Value="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarHeightKey}}"/>
                 <Setter Property="BorderThickness" Value="0,1"/>
                 <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ScrollBar}">
                            <Grid x:Name="Bg" SnapsToDevicePixels="true" Background="{TemplateBinding Background}">
                                 <Track x:Name="PART_Track" IsEnabled="{TemplateBinding IsMouseOver}" >
                                     <Track.Thumb>
                                         <Thumb Style="{DynamicResource ScrollBarThumbStyle}" />
                                     </Track.Thumb>
                                 </Track>
                            </Grid>
                        </ControlTemplate>
                    </Setter.Value>
                 </Setter>
             </Trigger>
         </Style.Triggers>
    </Style>

    <Style x:Key="ScrollBarThumbStyle" TargetType="{x:Type Thumb}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border CornerRadius="4" Background="{DynamicResource SecondaryTextBrush}" BorderBrush="Transparent" BorderThickness="1" x:Name="ThumbBorder"/>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="ThumbBorder" Property="Background" Value="{DynamicResource AccentBrush}"/>
                        </Trigger>
                        <Trigger Property="IsDragging" Value="True">
                             <Setter TargetName="ThumbBorder" Property="Background" Value="{DynamicResource AccentBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- NEON: AvalonEdit Specific Brushes -->
    <SolidColorBrush x:Key="EditorBackgroundBrush" Color="{StaticResource BaseBackgroundColor}"/>
    <SolidColorBrush x:Key="EditorForegroundBrush" Color="{StaticResource PrimaryForegroundColor}"/>
    <SolidColorBrush x:Key="Highlighting.Timestamp" Color="#FF87CEFA"/> <!-- LightSkyBlue -->
    <SolidColorBrush x:Key="Highlighting.Error" Color="{StaticResource ErrorColor}"/>
    <SolidColorBrush x:Key="Highlighting.Warning" Color="{StaticResource WarningColor}"/>
    <SolidColorBrush x:Key="Highlighting.Info" Color="{StaticResource InfoColor}"/>
    <StaticResource x:Key="Highlighting.FilterMatch.Background" ResourceKey="PersistedHighlightBrush"/>
    <SolidColorBrush x:Key="Highlighting.FilterMatch.Foreground" Color="{StaticResource PrimaryForegroundColor}"/> <!-- Ensure text is readable -->
    <SolidColorBrush x:Key="Highlighting.SearchMatch.Background" Color="{StaticResource HighlightSearchBackgroundColor}"/>
    <SolidColorBrush x:Key="Highlighting.SearchMatch.Foreground" Color="{StaticResource PrimaryForegroundColor}"/>

    <!-- NEON: Overview Ruler Brushes -->
    <SolidColorBrush x:Key="OverviewRuler.Background" Color="{StaticResource PanelBackgroundColor}"/>
    <SolidColorBrush x:Key="OverviewRuler.ThumbBrush" Color="#AA8A8A8E"/> <!-- Semi-transparent secondary text color -->
    <SolidColorBrush x:Key="OverviewRuler.BorderBrush" Color="{StaticResource BorderColor}"/>
    <SolidColorBrush x:Key="OverviewRuler.SearchMarkerBrush" Color="{StaticResource NeonAccentColor}"/>
    <SolidColorBrush x:Key="OverviewRuler.FilterMarkerBrush" Color="{StaticResource WarningColor}"/> <!-- Example -->
    <SolidColorBrush x:Key="OverviewRuler.ErrorMarkerBrush" Color="{StaticResource ErrorColor}"/>   <!-- Example -->

    <!-- Key for the ToggleButton Style -->
    <Style x:Key="ComboBoxToggleButtonKey" TargetType="{x:Type ToggleButton}">
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="ClickMode" Value="Press"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="templateRoot" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="3" SnapsToDevicePixels="true">
                        <Border x:Name="splitBorder" BorderBrush="Transparent" BorderThickness="1" HorizontalAlignment="Right" Margin="0" SnapsToDevicePixels="true" Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}">
                            <Path x:Name="arrow" Data="F1 M 0,0 L 2.667,2.667 L 5.333,0 L 5.333,-1.78168 L 2.667,0.88501 L0,-1.78168 L0,0 Z" Fill="{DynamicResource ComboBoxArrowBrush}" HorizontalAlignment="Center" Margin="0" VerticalAlignment="Center"/>
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Fill" TargetName="arrow" Value="{DynamicResource AccentBrush}"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Fill" TargetName="arrow" Value="{DynamicResource AccentBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ComboBox Style -->
    <Style TargetType="{x:Type ComboBox}">
        <Setter Property="Padding" Value="6,3"/>
        <Setter Property="MinWidth" Value="120"/>
        <Setter Property="Background" Value="{DynamicResource ComboBoxBackgroundBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource ComboBoxBorderBrush}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Foreground" Value="{DynamicResource TextForegroundBrush}"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <Grid x:Name="MainGrid" SnapsToDevicePixels="true">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Width="0"/>
                        </Grid.ColumnDefinitions>
                        <Popup x:Name="PART_Popup" AllowsTransparency="true" Grid.ColumnSpan="2" IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Margin="1" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" Placement="Bottom">
                            <Border x:Name="DropDownBorder" Background="{DynamicResource ComboBoxDropdownBackgroundBrush}" BorderBrush="{DynamicResource ComboBoxDropdownBorderBrush}" BorderThickness="1" CornerRadius="3">
                                <ScrollViewer x:Name="DropDownScrollViewer">
                                    <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                </ScrollViewer>
                            </Border>
                        </Popup>
                        <ToggleButton x:Name="toggleButton" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Grid.ColumnSpan="2" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Style="{StaticResource ComboBoxToggleButtonKey}"/>
                        <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" Content="{TemplateBinding SelectionBoxItem}" ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" IsHitTestVisible="false" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasItems" Value="false">
                            <Setter Property="Height" TargetName="DropDownBorder" Value="95"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value="0.5"/>
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <!-- Neon Night: Glow effect -->
                            <!-- Clinical Neon: Accent border -->
                            <Setter Property="BorderBrush" TargetName="toggleButton" Value="{DynamicResource AccentBrush}"/>
                            <Setter Property="Effect" TargetName="toggleButton" Value="{DynamicResource FocusGlowEffect}"/> <!-- Or adjust border thickness for Light theme -->
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ComboBoxItem Style -->
    <Style TargetType="{x:Type ComboBoxItem}">
        <Setter Property="Padding" Value="4,3"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                    <Border x:Name="Bd" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
                        <ContentPresenter
                            x:Name="contentPresenter"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsHighlighted" Value="true">
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource ComboBoxItemHoverBackgroundBrush}"/>
                            <Setter Property="Foreground" Value="{DynamicResource ComboBoxItemHoverForegroundBrush}"/>
                            <Setter TargetName="Bd" Property="BorderBrush" Value="{DynamicResource AccentBrush}"/>
                            <Setter TargetName="Bd" Property="Effect" Value="{DynamicResource FocusGlowEffect}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value="0.5"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>
