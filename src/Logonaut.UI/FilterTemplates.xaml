<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:vm="clr-namespace:Logonaut.UI.ViewModels"
                    xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
                    xmlns:helpers="clr-namespace:Logonaut.UI.Helpers"
                    xmlns:converters="clr-namespace:Logonaut.UI.Converters">

    <!-- Style for individual color choice buttons in the popup (ColorChoiceButtonStyle) -->
    <Style x:Key="ColorChoiceButtonStyle" TargetType="Button">
        <Setter Property="Width" Value="70"/>
        <Setter Property="Height" Value="25"/>
        <Setter Property="Margin" Value="2"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}"/>
        <Setter Property="DataContext" Value="{Binding}"/> 
        <Setter Property="Command" Value="{Binding DataContext.ChangeHighlightColorCommand, RelativeSource={RelativeSource AncestorType=Popup}}"/>
        <Setter Property="CommandParameter" Value="{Binding Key}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border x:Name="ButtonBorder"
                            Background="{Binding Key, Converter={StaticResource HighlightKeyToBrushConverter}, ConverterParameter=Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="2">
                        <TextBlock Text="{Binding Name}"
                                   Foreground="{Binding Key, Converter={StaticResource HighlightKeyToBrushConverter}, ConverterParameter=Foreground}"
                                   VerticalAlignment="Center" HorizontalAlignment="Center"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="ButtonBorder" Property="BorderBrush" Value="{DynamicResource AccentBrush}"/>
                            <Setter TargetName="ButtonBorder" Property="Effect" Value="{DynamicResource FocusGlowEffect}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="ButtonBorder" Property="BorderBrush" Value="{DynamicResource AccentBrush}"/>
                            <Setter TargetName="ButtonBorder" Property="Background" Value="{Binding Key, Converter={StaticResource HighlightKeyToBrushConverter}, ConverterParameter=Background}"/>
                            <Setter TargetName="ButtonBorder" Property="Effect">
                                <Setter.Value>
                                    <DropShadowEffect ShadowDepth="1" BlurRadius="2" Opacity="0.3" Color="Black"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.5"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Main HierarchicalDataTemplate for FilterViewModel -->
    <!-- Explicitly bind to the child collection. This important, or the children will not be displayed -->
    <HierarchicalDataTemplate DataType="{x:Type vm:FilterViewModel}"
                              ItemsSource="{Binding Children}">
        <Border x:Name="ItemBorder" Background="Transparent" Padding="0" CornerRadius="3">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/> <!-- CheckBox -->
                    <ColumnDefinition Width="Auto"/> <!-- Icon -->
                    <ColumnDefinition Width="*"/>    <!-- Filter Text (takes available space) -->
                    <ColumnDefinition Width="Auto"/> <!-- Color Indicator Button & Popup -->
                </Grid.ColumnDefinitions>

                <CheckBox Grid.Column="0" IsChecked="{Binding Enabled}" VerticalAlignment="Center" Margin="0,0,5,0"/>
                
                <ContentControl Grid.Column="1" Content="{Binding FilterType, Converter={StaticResource FilterTypeToIconConverter}}"
                                VerticalAlignment="Center" Margin="0,0,4,0" Focusable="False"/>
                
                <Grid Grid.Column="2" VerticalAlignment="Center">
                    <TextBlock Text="{Binding DisplayText}"
                               Visibility="{Binding IsNotEditing, Converter={StaticResource BoolToVis}}"
                               VerticalAlignment="Center">
                         <i:Interaction.Triggers>
                            <i:EventTrigger EventName="MouseLeftButtonUp">
                                <i:InvokeCommandAction Command="{Binding BeginEditCommand}" />
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                    </TextBlock>
                    <TextBox Text="{Binding FilterText, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                             Visibility="{Binding IsEditing, Converter={StaticResource BoolToVis}}"
                             helpers:TextBoxHelper.FocusOnVisible="True"
                             VerticalAlignment="Center"
                             MinWidth="80">
                         <i:Interaction.Triggers>
                            <i:EventTrigger EventName="LostFocus">
                                <i:InvokeCommandAction Command="{Binding EndEditCommand}" />
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                        <TextBox.InputBindings>
                            <KeyBinding Key="Enter" Command="{Binding EndEditCommand}" />
                            <KeyBinding Key="Escape" Command="{Binding EndEditCommand}" />
                        </TextBox.InputBindings>
                    </TextBox>
                </Grid>

                <!-- Color Indicator ToggleButton and Popup -->
                <Grid Grid.Column="3" Margin="5,0,0,0" VerticalAlignment="Center"
                      Visibility="{Binding IsEditable, Converter={StaticResource BoolToVis}}">
                    <Grid.Style>
                        <Style TargetType="Grid">
                            <Style.Triggers>
                                <DataTrigger Value="False">
                                    <DataTrigger.Binding>
                                        <MultiBinding Converter="{StaticResource IsFilterTypeConverter}" 
                                                      ConverterParameter="SubstringType|RegexType">
                                            <Binding Path="FilterType"/>
                                        </MultiBinding>
                                    </DataTrigger.Binding>
                                    <Setter Property="Visibility" Value="Collapsed"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Grid.Style>
                    
                    <ToggleButton x:Name="ColorIndicatorToggleButton" Width="22" Height="22" Padding="1"
                                  ToolTip="Change highlight color"
                                  BorderThickness="1"
                                  BorderBrush="{DynamicResource BorderBrush}">
                        <ToggleButton.Style>
                            <Style TargetType="ToggleButton">
                                <!-- The Background of the ToggleButton itself will be the color indicator -->
                                <Setter Property="Background" Value="{Binding HighlightColorKey, Converter={StaticResource HighlightKeyToBrushConverter}}"/>
                                <Setter Property="Template">
                                    <Setter.Value>
                                        <ControlTemplate TargetType="ToggleButton">
                                            <Border Background="{TemplateBinding Background}"
                                                    BorderBrush="{TemplateBinding BorderBrush}"
                                                    BorderThickness="{TemplateBinding BorderThickness}"
                                                    CornerRadius="2">
                                                <Path Data="M0,0 L3,3 L6,0 Z" 
                                                      Stretch="Uniform" Width="6" Height="4"
                                                      VerticalAlignment="Center" HorizontalAlignment="Center"
                                                      Fill="{Binding HighlightColorKey, Converter={StaticResource HighlightKeyToBrushConverter}, ConverterParameter=Foreground}"/>
                                            </Border>
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                                <Style.Triggers>
                                    <Trigger Property="IsMouseOver" Value="True">
                                        <Setter Property="BorderBrush" Value="{DynamicResource AccentBrush}"/>
                                    </Trigger>
                                    <Trigger Property="IsChecked" Value="True"> 
                                        <Setter Property="BorderBrush" Value="{DynamicResource AccentBrush}"/>
                                        <Setter Property="Effect" Value="{DynamicResource FocusGlowEffect}"/>
                                    </Trigger>
                                    <Trigger Property="IsEnabled" Value="False">
                                        <Setter Property="Opacity" Value="0.5"/>
                                    </Trigger>
                                </Style.Triggers>
                            </Style>
                        </ToggleButton.Style>
                    </ToggleButton>

                    <Popup x:Name="ColorPickerPopup"
                           IsOpen="{Binding IsChecked, ElementName=ColorIndicatorToggleButton, Mode=TwoWay}"
                           StaysOpen="False" 
                           PlacementTarget="{Binding ElementName=ColorIndicatorToggleButton}"
                           Placement="Bottom" VerticalOffset="3" HorizontalOffset="-2"
                           AllowsTransparency="True"
                           PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}">
                        <Border Background="{DynamicResource PanelBackgroundBrush}"
                                BorderBrush="{DynamicResource AccentBrush}" 
                                BorderThickness="1" CornerRadius="3" Padding="5"
                                Effect="{DynamicResource PanelShadowEffect}"
                                MinWidth="80"> 
                            <ItemsControl ItemsSource="{Binding Source={x:Static vm:FilterViewModel.AvailableHighlightColors}}"
                                          ItemContainerStyle="{x:Null}" Focusable="False"> 
                                <ItemsControl.ItemTemplate>
                                    <DataTemplate DataType="{x:Type vm:FilterHighlightColorChoice}">
                                        <Button Style="{StaticResource ColorChoiceButtonStyle}">
                                            <!-- Interaction Trigger to close popup on button click -->
                                            <i:Interaction.Triggers>
                                                <i:EventTrigger EventName="Click">
                                                    <i:ChangePropertyAction TargetObject="{Binding ElementName=ColorIndicatorToggleButton}" 
                                                                            PropertyName="IsChecked" Value="False"/>
                                                </i:EventTrigger>
                                            </i:Interaction.Triggers>
                                        </Button>
                                    </DataTemplate>
                                </ItemsControl.ItemTemplate>
                                <ItemsControl.ItemsPanel>
                                    <ItemsPanelTemplate>
                                        <StackPanel Orientation="Vertical" HorizontalAlignment="Stretch"/>
                                    </ItemsPanelTemplate>
                                </ItemsControl.ItemsPanel>
                            </ItemsControl>
                        </Border>
                    </Popup>
                </Grid>
            </Grid>
        </Border>
    </HierarchicalDataTemplate>
</ResourceDictionary>
