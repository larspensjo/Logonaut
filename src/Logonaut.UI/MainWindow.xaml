<Window x:Class="Logonaut.UI.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:avalonEdit="http://icsharpcode.net/sharpdevelop/avalonedit"
        xmlns:helpers="clr-namespace:Logonaut.UI.Helpers"
        xmlns:vm="clr-namespace:Logonaut.UI.ViewModels"
        xmlns:converters="clr-namespace:Logonaut.UI.Converters"
        xmlns:local="clr-namespace:Logonaut.UI"
        Title="Logonaut" Height="600" Width="900"
        Closing="Window_Closing"
        Style="{DynamicResource {x:Type Window}}"> <!-- NEON: Apply base window style -->

    <Window.Resources>
        <converters:StringToIntConverter x:Key="StringToIntConverter"/>
        <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
        <Style TargetType="{x:Type avalonEdit:TextEditor}" x:Key="TextEditorWithOverviewRulerStyle">
            <!-- Use DynamicResource for theme properties -->
            <Setter Property="Foreground" Value="{DynamicResource EditorForegroundBrush}" />
            <Setter Property="Background" Value="{DynamicResource EditorBackgroundBrush}" />
            <Setter Property="FontFamily" Value="Consolas" />
            <Setter Property="FontSize" Value="12" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type avalonEdit:TextEditor}">
                        <Grid Background="{TemplateBinding Background}">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <ScrollViewer x:Name="PART_ScrollViewer"
                                          Grid.Column="0"
                                          Focusable="False"
                                          CanContentScroll="True"
                                          VerticalScrollBarVisibility="Hidden"
                                          HorizontalScrollBarVisibility="{TemplateBinding HorizontalScrollBarVisibility}"
                                          Content="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TextArea}">
                            </ScrollViewer>
                            <!-- NEON: Use DynamicResource for ruler appearance -->
                            <helpers:OverviewRulerMargin
                                x:Name="OverviewRuler"
                                Grid.Column="1"
                                Width="18"
                                Background="{DynamicResource OverviewRuler.Background}"
                                BorderBrush="{DynamicResource OverviewRuler.BorderBrush}"
                                BorderThickness="1,0,0,0"
                                VerticalOffset="{Binding Path=VerticalOffset, ElementName=PART_ScrollViewer, Mode=OneWay}"
                                ViewportHeight="{Binding Path=ViewportHeight, ElementName=PART_ScrollViewer, Mode=OneWay}"
                                ExtentHeight="{Binding Path=ExtentHeight, ElementName=PART_ScrollViewer, Mode=OneWay}"
                                DocumentLength="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Document.TextLength, Mode=OneWay, FallbackValue=0}"
                                SearchMarkers="{Binding DataContext.SearchMarkers, RelativeSource={RelativeSource AncestorType=Window}, Mode=OneWay}"
                                SearchMarkerBrush="{DynamicResource OverviewRuler.SearchMarkerBrush}"
                                ThumbBrush="{DynamicResource OverviewRuler.ThumbBrush}"
                                />
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </Window.Resources>

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>

        <!-- Menu - Use default style which should inherit from theme -->
        <Menu Grid.Row="0">
            <MenuItem Header="_File">
                <MenuItem Header="Open Log File" Command="{Binding OpenLogFileCommand}" />
            </MenuItem>
            <MenuItem Header="_Theme">
                <MenuItem Header="Dark Mode" Command="{Binding Theme.SwitchToDarkCommand}" />
                <MenuItem Header="Light Mode" Command="{Binding Theme.SwitchToLightCommand}" />
            </MenuItem>
            <MenuItem Header="E_xit" Click="ExitMenuItem_Click"/>
        </Menu>

        <!-- Stats Bar -->
        <Border Grid.Row="1" Style="{DynamicResource CardPanelStyle}">
            <StackPanel Orientation="Horizontal" VerticalAlignment="Center">
                <!-- TODO: Bind Stats dynamically -->
                <TextBlock Text="Log Stats: " Margin="0,0,10,0" Foreground="{DynamicResource SecondaryTextBrush}"/>
                <TextBlock Text="Errors: 10" Margin="0,0,10,0" Foreground="{DynamicResource ErrorBrush}" FontWeight="Bold"/>
                <TextBlock Text="Warnings: 5" Margin="0,0,10,0" Foreground="{DynamicResource WarningBrush}"/>
                <TextBlock Text="Info: 20" Margin="0,0,10,0" Foreground="{DynamicResource InfoBrush}"/>
            </StackPanel>
        </Border>

        <!-- Main content -->
        <Grid Grid.Row="2">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="300"/>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>

            <!-- Left Panel: Filter Management -->
            <Border Grid.Column="0" Style="{DynamicResource CardPanelStyle}">
                <DockPanel>
                     <TextBlock DockPanel.Dock="Top" Text="Filters" FontWeight="Bold" Margin="0,0,0,5"/>

                     <!-- Profile Management Area -->
                     <StackPanel DockPanel.Dock="Top" Margin="0,0,0,10">
                         <TextBlock Text="Active Profile:" Margin="0,0,0,2" FontSize="10" Foreground="{DynamicResource SecondaryTextBrush}"/>
                         <ComboBox ItemsSource="{Binding AvailableProfiles}"
                                   SelectedItem="{Binding ActiveFilterProfile}"
                                   DisplayMemberPath="Name"
                                   Margin="0,0,0,5">
                             <ComboBox.ToolTip>
                                 <ToolTip>Select the active filter profile.</ToolTip>
                             </ComboBox.ToolTip>
                         </ComboBox>
                         <WrapPanel HorizontalAlignment="Center">
                            <Button Content="New" Command="{Binding CreateNewProfileCommand}" Margin="2" ToolTip="Create a new filter profile"/>
                            <Button Content="Rename" Command="{Binding RenameProfileCommand}" Margin="2" ToolTip="Rename the selected profile"/>
                            <Button Content="Delete" Command="{Binding DeleteProfileCommand}" Margin="2" ToolTip="Delete the selected profile"/>
                         </WrapPanel>
                     </StackPanel>

                     <!-- Buttons for NODE management (below TreeView) -->
                     <StackPanel DockPanel.Dock="Bottom" Margin="0,10,0,0">
                        <TextBlock Text="Add Filter Node:" Margin="0,0,0,2" FontSize="10" Foreground="{DynamicResource SecondaryTextBrush}" HorizontalAlignment="Center"/>
                        <WrapPanel Orientation="Horizontal" HorizontalAlignment="Center" Margin="0,0,0,10">
                             <!-- Pass string parameter to identify filter type -->
                            <Button Content="Substring" Command="{Binding AddFilterCommand}" CommandParameter="Substring" Margin="2"/>
                            <Button Content="Regex" Command="{Binding AddFilterCommand}" CommandParameter="Regex" Margin="2"/>
                            <Button Content="AND" Command="{Binding AddFilterCommand}" CommandParameter="And" Margin="2"/>
                            <Button Content="OR" Command="{Binding AddFilterCommand}" CommandParameter="Or" Margin="2"/>
                            <Button Content="NOR" Command="{Binding AddFilterCommand}" CommandParameter="Nor" Margin="2"/>
                        </WrapPanel>
                         <!-- Edit/Remove operate on the selected NODE -->
                        <Button Content="Edit Node" Command="{Binding ToggleEditNodeCommand}" Margin="0,5,0,0" ToolTip="Edit the selected filter node's value"/>
                        <Button Content="Remove Node" Command="{Binding RemoveFilterNodeCommand}" Margin="0,5,0,0" ToolTip="Remove the selected filter node and its children"/>
                     </StackPanel>

                     <!-- TreeView now displays the ACTIVE profile's tree -->
                    <TreeView x:Name="FilterTreeViewNameForTesting"
                              ItemsSource="{Binding ActiveTreeRootNodes}"
                              SelectedItemChanged="TreeView_SelectedItemChanged"
                              Margin="0,0,0,0"
                              Background="Transparent">
                         <TreeView.ItemContainerStyle>
                             <!-- Apply the HierarchicalDataTemplate from FilterTemplates.xaml -->
                             <Style TargetType="{x:Type TreeViewItem}" BasedOn="{StaticResource {x:Type TreeViewItem}}">
                                 <!-- Bind IsSelected to the FilterViewModel's IsSelected property if needed -->
                                 <!-- <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}" /> -->
                             </Style>
                         </TreeView.ItemContainerStyle>
                    </TreeView>
                </DockPanel>
            </Border>

            <!-- Right Panel: Log Display and Search -->
            <Grid Grid.Column="1">
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="*"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>

                <!-- Toolbar -->
                <Border Grid.Row="0" Style="{DynamicResource CardPanelStyle}" Padding="5" Margin="5,5,5,0">
                    <WrapPanel Orientation="Horizontal" VerticalAlignment="Center">
                        <TextBlock Text="Display Options:" VerticalAlignment="Center" Margin="5,0,10,0"/>
                         <!-- NEON: Use ToggleSwitchStyle -->
                        <ToggleButton Content="Line Numbers" IsChecked="{Binding ShowLineNumbers}"
                                      Style="{DynamicResource ToggleSwitchStyle}"
                                      ToolTip="Show or hide original line numbers" Margin="3"/>
                        <ToggleButton Content="Highlight Timestamps" IsChecked="{Binding HighlightTimestamps}"
                                      Style="{DynamicResource ToggleSwitchStyle}"
                                      ToolTip="Highlight timestamp patterns in log entries" Margin="3"/>

                        <Separator Style="{StaticResource {x:Static ToolBar.SeparatorStyleKey}}" Margin="5,2"/>

                        <StackPanel Orientation="Horizontal" VerticalAlignment="Center">
                            <TextBlock Text="Context Lines:" VerticalAlignment="Center" Margin="5,0,2,0"/>
                            <TextBox Text="{Binding ContextLines, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource StringToIntConverter}}"
                                    Width="35" VerticalAlignment="Center" VerticalContentAlignment="Center" Margin="0,0,2,0">
                                <TextBox.ToolTip><ToolTip>Enter the number of lines to show before and after a matched line (0 = none).</ToolTip></TextBox.ToolTip>
                            </TextBox>
                            <StackPanel Orientation="Vertical" VerticalAlignment="Center">
                                <!-- NEON: Use base Button style, maybe adjust padding/fontsize -->
                                <Button Content="▲" Command="{Binding IncrementContextLinesCommand}" Padding="3,0" Margin="0,0,0,1" FontSize="8" MinHeight="10" ToolTip="Increase Context Lines"/>
                                <Button Content="▼" Command="{Binding DecrementContextLinesCommand}" Padding="3,0" Margin="0,1,0,0" FontSize="8" MinHeight="10" ToolTip="Decrease Context Lines"/>
                            </StackPanel>
                        </StackPanel>

                        <Separator Style="{StaticResource {x:Static ToolBar.SeparatorStyleKey}}" Margin="5,2"/>

                    <!-- Busy Indicator -->
                    <!-- TODO: This should be some kind of spinner instead -->
                    <TextBlock Text="Processing..."
                            VerticalAlignment="Center"
                            Foreground="OrangeRed"
                            FontWeight="Bold"
                            Margin="10,0,5,0"
                            Visibility="{Binding IsBusyFiltering, Converter={StaticResource BooleanToVisibilityConverter}}">
                        <TextBlock.ToolTip>
                            <ToolTip>Applying filters or loading data...</ToolTip>
                        </TextBlock.ToolTip>
                    </TextBlock>

                        <TextBlock Text="{Binding SearchStatusText}" VerticalAlignment="Center" Margin="10,0,5,0" FontStyle="Italic" Foreground="{DynamicResource SecondaryTextBrush}"/>
                    </WrapPanel>
                </Border>

                <!-- Log Display -->
                <Border Grid.Row="1" Style="{DynamicResource CardPanelStyle}" Padding="5">
                     <!-- NEON: Apply the locally defined style -->
                     <avalonEdit:TextEditor x:Name="LogOutputEditor"
                                        xmlns:avalonEdit="http://icsharpcode.net/sharpdevelop/avalonedit"
                                        xmlns:helpers="clr-namespace:Logonaut.UI.Helpers"
                                        FontFamily="Consolas" FontSize="12pt" IsReadOnly="True"
                                        SyntaxHighlighting="{x:Null}"
                                        WordWrap="False"
                                        VerticalScrollBarVisibility="Disabled"
                                        HorizontalScrollBarVisibility="Auto"
                                        Padding="3,0,0,0"
                                        Style="{StaticResource TextEditorWithOverviewRulerStyle}"
                                        helpers:AvalonEditHelper.BindableText="{Binding LogText, Mode=OneWay}"
                                        helpers:AvalonEditHelper.FilterSubstrings="{Binding FilterSubstrings, Mode=OneWay}"
                                        helpers:AvalonEditHelper.HighlightTimestamps="{Binding HighlightTimestamps, Mode=OneWay}"
                                        ShowLineNumbers="False"
                                        helpers:AvalonEditHelper.SearchTerm="{Binding SearchText, Mode=OneWay}"
                                        helpers:AvalonEditHelper.SelectOffset="{Binding CurrentMatchOffset, Mode=OneWay}"
                                        helpers:AvalonEditHelper.SelectLength="{Binding CurrentMatchLength, Mode=OneWay}">
                    </avalonEdit:TextEditor>
                </Border>

                <!-- Search Panel -->
                 <Border Grid.Row="2" Style="{DynamicResource CardPanelStyle}" Padding="5" Margin="5,0,5,5">
                     <StackPanel Orientation="Horizontal" HorizontalAlignment="Center" VerticalAlignment="Center">
                        <Button Content="Previous" Command="{Binding PreviousSearchCommand}" Margin="5,0"/>
                        <TextBox Width="250" Text="{Binding SearchText, UpdateSourceTrigger=PropertyChanged}" Margin="5,0"/>
                        <Button Content="Next" Command="{Binding NextSearchCommand}" Margin="5,0" />
                        <Separator Style="{StaticResource {x:Static ToolBar.SeparatorStyleKey}}" Margin="5,0"/>
                        <CheckBox Content="Case Sensitive" IsChecked="{Binding IsCaseSensitiveSearch}" VerticalAlignment="Center" Margin="5,0">
                            <CheckBox.ToolTip><ToolTip>Match case when searching</ToolTip></CheckBox.ToolTip>
                        </CheckBox>
                    </StackPanel>
                 </Border>
            </Grid>
        </Grid>
    </Grid>
</Window>