<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:vm="clr-namespace:Logonaut.UI.ViewModels"
                    xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
                    xmlns:helpers="clr-namespace:Logonaut.UI.Helpers"
                    xmlns:converters="clr-namespace:Logonaut.UI.Converters">


    <!-- Style for the ComboBoxItem in the filter color selector's popup -->
    <Style x:Key="FilterColorComboBoxItemStyle" TargetType="ComboBoxItem">
        <Setter Property="Padding" Value="4,3"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ComboBoxItem">
                    <Border x:Name="Bd"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Padding="{TemplateBinding Padding}"
                            SnapsToDevicePixels="true">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsHighlighted" Value="true">
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource ComboBoxItemHoverBackgroundBrush}"/>
                            <Setter Property="Foreground" Value="{DynamicResource ComboBoxItemHoverForegroundBrush}"/>
                            <Setter TargetName="Bd" Property="BorderBrush" Value="{DynamicResource AccentBrush}"/>
                            <Setter TargetName="Bd" Property="Effect" Value="{DynamicResource FocusGlowEffect}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value="0.5"/>
                        </Trigger>
                        <!-- DataTriggers to set background/foreground based on the item's DataContext (FilterHighlightColorChoice.Key) -->
                        <DataTrigger Binding="{Binding Key}" Value="FilterHighlight.Default">
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource FilterHighlight.Default.Background}"/>
                            <Setter Property="Foreground" Value="{DynamicResource FilterHighlight.Default.Foreground}"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Key}" Value="FilterHighlight.Red">
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource FilterHighlight.Red.Background}"/>
                            <Setter Property="Foreground" Value="{DynamicResource FilterHighlight.Red.Foreground}"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Key}" Value="FilterHighlight.Green">
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource FilterHighlight.Green.Background}"/>
                            <Setter Property="Foreground" Value="{DynamicResource FilterHighlight.Green.Foreground}"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Key}" Value="FilterHighlight.Blue">
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource FilterHighlight.Blue.Background}"/>
                            <Setter Property="Foreground" Value="{DynamicResource FilterHighlight.Blue.Foreground}"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Key}" Value="FilterHighlight.Yellow">
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource FilterHighlight.Yellow.Background}"/>
                            <Setter Property="Foreground" Value="{DynamicResource FilterHighlight.Yellow.Foreground}"/>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Style for the ComboBox used INSIDE the Popup -->
    <Style x:Key="PopupColorComboBoxStyle" TargetType="ComboBox" BasedOn="{StaticResource {x:Type ComboBox}}">
        <Setter Property="ItemContainerStyle" Value="{StaticResource FilterColorComboBoxItemStyle}"/>
        <!-- You might want to set a MinWidth or specific Width here if the default is too small -->
        <Setter Property="MinWidth" Value="100"/>
    </Style>

    <!-- Main HierarchicalDataTemplate for FilterViewModel -->
    <!-- Explicitly bind to the child collection. This important, or the children will not be displayed -->
    <HierarchicalDataTemplate DataType="{x:Type vm:FilterViewModel}"
                              ItemsSource="{Binding Children}">
        <Border x:Name="ItemBorder" Background="Transparent" Padding="0" CornerRadius="3">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/> <!-- CheckBox -->
                    <ColumnDefinition Width="Auto"/> <!-- Icon -->
                    <ColumnDefinition Width="*"/>    <!-- Filter Text (takes available space) -->
                    <ColumnDefinition Width="Auto"/> <!-- Color Indicator Button & Popup -->
                </Grid.ColumnDefinitions>

                <CheckBox Grid.Column="0" IsChecked="{Binding Enabled}" VerticalAlignment="Center" Margin="0,0,5,0"/>
                
                <ContentControl Grid.Column="1" Content="{Binding FilterType, Converter={StaticResource FilterTypeToIconConverter}}"
                                VerticalAlignment="Center" Margin="0,0,4,0" Focusable="False"/>
                
                <Grid Grid.Column="2" VerticalAlignment="Center">
                    <TextBlock Text="{Binding DisplayText}"
                               Visibility="{Binding IsNotEditing, Converter={StaticResource BoolToVis}}"
                               VerticalAlignment="Center">
                         <i:Interaction.Triggers>
                            <i:EventTrigger EventName="MouseLeftButtonUp">
                                <i:InvokeCommandAction Command="{Binding BeginEditCommand}" />
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                    </TextBlock>
                    <TextBox Text="{Binding FilterText, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                             Visibility="{Binding IsEditing, Converter={StaticResource BoolToVis}}"
                             helpers:TextBoxHelper.FocusOnVisible="True"
                             VerticalAlignment="Center"
                             MinWidth="80">
                         <i:Interaction.Triggers>
                            <i:EventTrigger EventName="LostFocus">
                                <i:InvokeCommandAction Command="{Binding EndEditCommand}" />
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                        <TextBox.InputBindings>
                            <KeyBinding Key="Enter" Command="{Binding EndEditCommand}" />
                            <KeyBinding Key="Escape" Command="{Binding EndEditCommand}" />
                        </TextBox.InputBindings>
                    </TextBox>
                </Grid>

                <!-- Color Indicator ToggleButton and Popup -->
                <Grid Grid.Column="3" Margin="5,0,0,0" VerticalAlignment="Center"
                      Visibility="{Binding IsEditable, Converter={StaticResource BoolToVis}}">
                    <Grid.Style>
                        <Style TargetType="Grid">
                            <Style.Triggers>
                                <DataTrigger Value="False">
                                    <DataTrigger.Binding>
                                        <MultiBinding Converter="{StaticResource IsFilterTypeConverter}" 
                                                      ConverterParameter="SubstringType|RegexType">
                                            <Binding Path="FilterType"/>
                                        </MultiBinding>
                                    </DataTrigger.Binding>
                                    <Setter Property="Visibility" Value="Collapsed"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Grid.Style>
                    
                    <ToggleButton x:Name="ColorIndicatorToggleButton" Width="22" Height="22" Padding="1"
                                  ToolTip="Change highlight color"
                                  BorderThickness="1"
                                  BorderBrush="{DynamicResource BorderBrush}">
                        <ToggleButton.Style>
                            <Style TargetType="ToggleButton">
                                <!-- The Background of the ToggleButton itself will be the color indicator -->
                                <Setter Property="Background" Value="{Binding HighlightColorKey, Converter={StaticResource HighlightKeyToBrushConverter}}"/>
                                <Setter Property="Template">
                                    <Setter.Value>
                                        <ControlTemplate TargetType="ToggleButton">
                                            <Border Background="{TemplateBinding Background}"
                                                    BorderBrush="{TemplateBinding BorderBrush}"
                                                    BorderThickness="{TemplateBinding BorderThickness}"
                                                    CornerRadius="2">
                                                <!-- Optional: A small visual cue like a downward triangle -->
                                                <Path Data="M0,0 L3,3 L6,0 Z" 
                                                      Stretch="Uniform" Width="6" Height="4"
                                                      VerticalAlignment="Center" HorizontalAlignment="Center"
                                                      Fill="{Binding HighlightColorKey, Converter={StaticResource HighlightKeyToBrushConverter}, ConverterParameter=Foreground}"/>
                                            </Border>
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                                <Style.Triggers>
                                    <Trigger Property="IsMouseOver" Value="True">
                                        <Setter Property="BorderBrush" Value="{DynamicResource AccentBrush}"/>
                                    </Trigger>
                                    <Trigger Property="IsChecked" Value="True"> <!-- When popup is open -->
                                        <Setter Property="BorderBrush" Value="{DynamicResource AccentBrush}"/>
                                         <!-- Optional: A slight change to indicate it's active -->
                                        <Setter Property="Effect" Value="{DynamicResource FocusGlowEffect}"/>
                                    </Trigger>
                                    <Trigger Property="IsEnabled" Value="False">
                                        <Setter Property="Opacity" Value="0.5"/>
                                    </Trigger>
                                </Style.Triggers>
                            </Style>
                        </ToggleButton.Style>
                    </ToggleButton>

                    <Popup x:Name="ColorPickerPopup"
                           IsOpen="{Binding IsChecked, ElementName=ColorIndicatorToggleButton, Mode=TwoWay}"
                           StaysOpen="False" 
                           PlacementTarget="{Binding ElementName=ColorIndicatorToggleButton}"
                           Placement="Bottom" VerticalOffset="3" HorizontalOffset="-2"
                           AllowsTransparency="True"
                           PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}">
                        <Border Background="{DynamicResource PanelBackgroundBrush}"
                                BorderBrush="{DynamicResource AccentBrush}" 
                                BorderThickness="1" CornerRadius="3" Padding="5"
                                Effect="{DynamicResource PanelShadowEffect}">
                            <ComboBox x:Name="InnerColorComboBox"
                                      ItemsSource="{Binding Source={x:Static vm:FilterViewModel.AvailableHighlightColors}}"
                                      SelectedValue="{Binding HighlightColorKey, Mode=TwoWay}"
                                      SelectedValuePath="Key"
                                      DisplayMemberPath="Name"
                                      Style="{StaticResource PopupColorComboBoxStyle}">
                                <i:Interaction.Triggers>
                                    <i:EventTrigger EventName="SelectionChanged">
                                        <!-- This action closes the popup by unchecking the ToggleButton -->
                                        <i:ChangePropertyAction TargetName="ColorIndicatorToggleButton" PropertyName="IsChecked" Value="False"/>
                                    </i:EventTrigger>
                                </i:Interaction.Triggers>
                            </ComboBox>
                        </Border>
                    </Popup>
                </Grid>
            </Grid>
        </Border>
    </HierarchicalDataTemplate>
</ResourceDictionary>
